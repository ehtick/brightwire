//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31294372
// Cuda compilation tools, release 11.7, V11.7.64
// Based on NVVM 7.0.1
//

.version 7.7
.target sm_53
.address_size 64

	// .globl	IsFinite
// _ZZ13FindMinAndMaxE5block has been demoted
// _ZZ10FindStdDevE5block has been demoted
// _ZZ9SumValuesE5block has been demoted

.visible .entry IsFinite(
	.param .u64 IsFinite_param_0,
	.param .u64 IsFinite_param_1,
	.param .u32 IsFinite_param_2,
	.param .u32 IsFinite_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [IsFinite_param_0];
	ld.param.u64 	%rd4, [IsFinite_param_1];
	ld.param.u32 	%r6, [IsFinite_param_2];
	ld.param.u32 	%r7, [IsFinite_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB0_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB0_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.geu.ftz.f32 	%p2, %f2, 0f7F800000;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	mul.wide.u32 	%rd7, %r12, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p3, %r12, %r6;
	@%p3 bra 	$L__BB0_2;

$L__BB0_3:
	ret;

}
	// .globl	Scale
.visible .entry Scale(
	.param .u64 Scale_param_0,
	.param .u32 Scale_param_1,
	.param .f32 Scale_param_2,
	.param .u32 Scale_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Scale_param_0];
	ld.param.u32 	%r6, [Scale_param_1];
	ld.param.f32 	%f1, [Scale_param_2];
	ld.param.u32 	%r7, [Scale_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB1_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB1_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd3, %r11, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB1_2;

$L__BB1_3:
	ret;

}
	// .globl	PointwiseMultiply
.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2,
	.param .u32 PointwiseMultiply_param_3,
	.param .u32 PointwiseMultiply_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd4, [PointwiseMultiply_param_1];
	ld.param.u32 	%r6, [PointwiseMultiply_param_2];
	ld.param.u32 	%r7, [PointwiseMultiply_param_3];
	ld.param.u32 	%r8, [PointwiseMultiply_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB2_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB2_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB2_2;

$L__BB2_3:
	ret;

}
	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2,
	.param .u32 PointwiseDivide_param_3,
	.param .u32 PointwiseDivide_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivide_param_0];
	ld.param.u64 	%rd4, [PointwiseDivide_param_1];
	ld.param.u32 	%r6, [PointwiseDivide_param_2];
	ld.param.u32 	%r7, [PointwiseDivide_param_3];
	ld.param.u32 	%r8, [PointwiseDivide_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB3_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB3_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB3_2;

$L__BB3_3:
	ret;

}
	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3,
	.param .u32 Sqrt_param_4,
	.param .u32 Sqrt_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Sqrt_param_0];
	ld.param.u64 	%rd4, [Sqrt_param_1];
	ld.param.u32 	%r6, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	ld.param.u32 	%r7, [Sqrt_param_4];
	ld.param.u32 	%r8, [Sqrt_param_5];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB4_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB4_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f4;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB4_2;

$L__BB4_3:
	ret;

}
	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4,
	.param .u32 AddInPlace_param_5,
	.param .u32 AddInPlace_param_6
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddInPlace_param_0];
	ld.param.u64 	%rd4, [AddInPlace_param_1];
	ld.param.u32 	%r6, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	ld.param.u32 	%r7, [AddInPlace_param_5];
	ld.param.u32 	%r8, [AddInPlace_param_6];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB5_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB5_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f3, [%rd6];
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f4, [%rd8];
	mul.ftz.f32 	%f5, %f4, %f2;
	fma.rn.ftz.f32 	%f6, %f3, %f1, %f5;
	st.global.f32 	[%rd6], %f6;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB5_2;

$L__BB5_3:
	ret;

}
	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4,
	.param .u32 SubtractInPlace_param_5,
	.param .u32 SubtractInPlace_param_6
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SubtractInPlace_param_0];
	ld.param.u64 	%rd4, [SubtractInPlace_param_1];
	ld.param.u32 	%r6, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	ld.param.u32 	%r7, [SubtractInPlace_param_5];
	ld.param.u32 	%r8, [SubtractInPlace_param_6];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB6_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB6_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f3, [%rd6];
	mul.ftz.f32 	%f4, %f3, %f1;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f5, [%rd8];
	mul.ftz.f32 	%f6, %f5, %f2;
	sub.ftz.f32 	%f7, %f4, %f6;
	st.global.f32 	[%rd6], %f7;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB6_2;

$L__BB6_3:
	ret;

}
	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachRow_param_0];
	ld.param.u64 	%rd4, [AddToEachRow_param_1];
	ld.param.u32 	%r10, [AddToEachRow_param_2];
	ld.param.u32 	%r11, [AddToEachRow_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB7_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB7_2:
	@%p2 bra 	$L__BB7_5;

	mov.u32 	%r21, %r3;

$L__BB7_4:
	mul.wide.u32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB7_4;

$L__BB7_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB7_2;

$L__BB7_6:
	ret;

}
	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachColumn_param_0];
	ld.param.u64 	%rd4, [AddToEachColumn_param_1];
	ld.param.u32 	%r10, [AddToEachColumn_param_2];
	ld.param.u32 	%r11, [AddToEachColumn_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB8_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB8_2:
	@%p2 bra 	$L__BB8_5;

	mul.wide.u32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

$L__BB8_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f2, [%rd8];
	add.ftz.f32 	%f3, %f1, %f2;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB8_4;

$L__BB8_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB8_2;

$L__BB8_6:
	ret;

}
	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2,
	.param .u32 TanH_param_3,
	.param .u32 TanH_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [TanH_param_0];
	ld.param.u64 	%rd4, [TanH_param_1];
	ld.param.u32 	%r6, [TanH_param_2];
	ld.param.u32 	%r7, [TanH_param_3];
	ld.param.u32 	%r8, [TanH_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r18, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r18, %r6;
	@%p1 bra 	$L__BB9_6;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f15, 0fBD563CAE;
	mov.f32 	%f16, 0f3C80F082;

$L__BB9_2:
	mul.lo.s32 	%r12, %r18, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32 	%p2, %f2, 0f3F19999A;
	@%p2 bra 	$L__BB9_4;
	bra.uni 	$L__BB9_3;

$L__BB9_4:
	mul.ftz.f32 	%f14, %f1, %f1;
	fma.rn.ftz.f32 	%f17, %f16, %f14, %f15;
	mov.f32 	%f18, 0f3E085941;
	fma.rn.ftz.f32 	%f19, %f17, %f14, %f18;
	mov.f32 	%f20, 0fBEAAA9ED;
	fma.rn.ftz.f32 	%f21, %f19, %f14, %f20;
	mov.f32 	%f22, 0f00000000;
	fma.rn.ftz.f32 	%f23, %f21, %f14, %f22;
	fma.rn.ftz.f32 	%f24, %f23, %f1, %f1;
	bra.uni 	$L__BB9_5;

$L__BB9_3:
	mul.ftz.f32 	%f6, %f2, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f7, %f6;
	add.ftz.f32 	%f8, %f7, 0f3F800000;
	mov.f32 	%f9, 0f3F800000;
	rcp.approx.ftz.f32 	%f10, %f8;
	mov.f32 	%f11, 0fC0000000;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f9;
	setp.ge.ftz.f32 	%p3, %f2, 0f41102CB4;
	selp.f32 	%f13, 0f3F800000, %f12, %p3;
	mov.b32 	%r13, %f13;
	mov.b32 	%r14, %f1;
	and.b32  	%r15, %r14, -2147483648;
	or.b32  	%r16, %r15, %r13;
	mov.b32 	%f24, %r16;

$L__BB9_5:
	mul.lo.s32 	%r17, %r18, %r8;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f24;
	add.s32 	%r18, %r18, %r3;
	setp.lt.u32 	%p4, %r18, %r6;
	@%p4 bra 	$L__BB9_2;

$L__BB9_6:
	ret;

}
	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2,
	.param .u32 TanHDerivative_param_3,
	.param .u32 TanHDerivative_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<28>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [TanHDerivative_param_0];
	ld.param.u64 	%rd4, [TanHDerivative_param_1];
	ld.param.u32 	%r6, [TanHDerivative_param_2];
	ld.param.u32 	%r7, [TanHDerivative_param_3];
	ld.param.u32 	%r8, [TanHDerivative_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r18, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r18, %r6;
	@%p1 bra 	$L__BB10_6;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f15, 0fBD563CAE;
	mov.f32 	%f16, 0f3C80F082;

$L__BB10_2:
	mul.lo.s32 	%r12, %r18, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32 	%p2, %f2, 0f3F19999A;
	@%p2 bra 	$L__BB10_4;
	bra.uni 	$L__BB10_3;

$L__BB10_4:
	mul.ftz.f32 	%f14, %f1, %f1;
	fma.rn.ftz.f32 	%f17, %f16, %f14, %f15;
	mov.f32 	%f18, 0f3E085941;
	fma.rn.ftz.f32 	%f19, %f17, %f14, %f18;
	mov.f32 	%f20, 0fBEAAA9ED;
	fma.rn.ftz.f32 	%f21, %f19, %f14, %f20;
	mov.f32 	%f22, 0f00000000;
	fma.rn.ftz.f32 	%f23, %f21, %f14, %f22;
	fma.rn.ftz.f32 	%f27, %f23, %f1, %f1;
	bra.uni 	$L__BB10_5;

$L__BB10_3:
	mul.ftz.f32 	%f6, %f2, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f7, %f6;
	add.ftz.f32 	%f8, %f7, 0f3F800000;
	mov.f32 	%f9, 0f3F800000;
	rcp.approx.ftz.f32 	%f10, %f8;
	mov.f32 	%f11, 0fC0000000;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f9;
	setp.ge.ftz.f32 	%p3, %f2, 0f41102CB4;
	selp.f32 	%f13, 0f3F800000, %f12, %p3;
	mov.b32 	%r13, %f13;
	mov.b32 	%r14, %f1;
	and.b32  	%r15, %r14, -2147483648;
	or.b32  	%r16, %r15, %r13;
	mov.b32 	%f27, %r16;

$L__BB10_5:
	mul.ftz.f32 	%f24, %f27, %f27;
	mov.f32 	%f25, 0f3F800000;
	sub.ftz.f32 	%f26, %f25, %f24;
	mul.lo.s32 	%r17, %r18, %r8;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f26;
	add.s32 	%r18, %r18, %r3;
	setp.lt.u32 	%p4, %r18, %r6;
	@%p4 bra 	$L__BB10_2;

$L__BB10_6:
	ret;

}
	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2,
	.param .u32 Sigmoid_param_3,
	.param .u32 Sigmoid_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Sigmoid_param_0];
	ld.param.u64 	%rd4, [Sigmoid_param_1];
	ld.param.u32 	%r6, [Sigmoid_param_2];
	ld.param.u32 	%r7, [Sigmoid_param_3];
	ld.param.u32 	%r8, [Sigmoid_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB11_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB11_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f5;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB11_2;

$L__BB11_3:
	ret;

}
	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2,
	.param .u32 SigmoidDerivative_param_3,
	.param .u32 SigmoidDerivative_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd4, [SigmoidDerivative_param_1];
	ld.param.u32 	%r6, [SigmoidDerivative_param_2];
	ld.param.u32 	%r7, [SigmoidDerivative_param_3];
	ld.param.u32 	%r8, [SigmoidDerivative_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB12_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f5, 0f3F800000;

$L__BB12_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f6, %f4;
	sub.ftz.f32 	%f7, %f5, %f6;
	mul.ftz.f32 	%f8, %f6, %f7;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f8;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB12_2;

$L__BB12_3:
	ret;

}
	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2,
	.param .u32 RELU_param_3,
	.param .u32 RELU_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [RELU_param_0];
	ld.param.u64 	%rd4, [RELU_param_1];
	ld.param.u32 	%r6, [RELU_param_2];
	ld.param.u32 	%r7, [RELU_param_3];
	ld.param.u32 	%r8, [RELU_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB13_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB13_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f00000000, %f1, %p2;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f2;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p3, %r14, %r6;
	@%p3 bra 	$L__BB13_2;

$L__BB13_3:
	ret;

}
	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2,
	.param .u32 RELUDerivative_param_3,
	.param .u32 RELUDerivative_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [RELUDerivative_param_0];
	ld.param.u64 	%rd4, [RELUDerivative_param_1];
	ld.param.u32 	%r6, [RELUDerivative_param_2];
	ld.param.u32 	%r7, [RELUDerivative_param_3];
	ld.param.u32 	%r8, [RELUDerivative_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB14_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB14_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f3F800000, 0f00000000, %p2;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f2;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p3, %r14, %r6;
	@%p3 bra 	$L__BB14_2;

$L__BB14_3:
	ret;

}
	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2,
	.param .u32 LeakyRELU_param_3,
	.param .u32 LeakyRELU_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [LeakyRELU_param_0];
	ld.param.u64 	%rd4, [LeakyRELU_param_1];
	ld.param.u32 	%r6, [LeakyRELU_param_2];
	ld.param.u32 	%r7, [LeakyRELU_param_3];
	ld.param.u32 	%r8, [LeakyRELU_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB15_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB15_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	mul.ftz.f32 	%f2, %f1, 0f3C23D70A;
	selp.f32 	%f3, %f2, %f1, %p2;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p3, %r14, %r6;
	@%p3 bra 	$L__BB15_2;

$L__BB15_3:
	ret;

}
	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2,
	.param .u32 LeakyRELUDerivative_param_3,
	.param .u32 LeakyRELUDerivative_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd4, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r6, [LeakyRELUDerivative_param_2];
	ld.param.u32 	%r7, [LeakyRELUDerivative_param_3];
	ld.param.u32 	%r8, [LeakyRELUDerivative_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB16_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB16_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f3C23D70A, 0f3F800000, %p2;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f2;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p3, %r14, %r6;
	@%p3 bra 	$L__BB16_2;

$L__BB16_3:
	ret;

}
	// .globl	Reverse
.visible .entry Reverse(
	.param .u64 Reverse_param_0,
	.param .u64 Reverse_param_1,
	.param .u32 Reverse_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Reverse_param_0];
	ld.param.u64 	%rd4, [Reverse_param_1];
	ld.param.u32 	%r6, [Reverse_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r12, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB17_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB17_2:
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	not.b32 	%r10, %r12;
	add.s32 	%r11, %r10, %r6;
	mul.wide.u32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB17_2;

$L__BB17_3:
	ret;

}
	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd4, [SumRows_param_0];
	ld.param.u64 	%rd5, [SumRows_param_1];
	ld.param.u32 	%r10, [SumRows_param_2];
	ld.param.u32 	%r11, [SumRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB18_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB18_2:
	@%p2 bra 	$L__BB18_5;

	mul.wide.u32 	%rd6, %r20, 4;
	add.s64 	%rd3, %rd2, %rd6;
	mov.u32 	%r21, %r3;

$L__BB18_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd3], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB18_4;

$L__BB18_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB18_2;

$L__BB18_6:
	ret;

}
	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SumColumns_param_0];
	ld.param.u64 	%rd4, [SumColumns_param_1];
	ld.param.u32 	%r10, [SumColumns_param_2];
	ld.param.u32 	%r11, [SumColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB19_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB19_2:
	@%p2 bra 	$L__BB19_5;

	mov.u32 	%r21, %r3;

$L__BB19_4:
	mul.wide.u32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd2, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd6], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB19_4;

$L__BB19_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB19_2;

$L__BB19_6:
	ret;

}
	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [MemClear_param_0];
	ld.param.u32 	%r6, [MemClear_param_1];
	ld.param.u32 	%r7, [MemClear_param_2];
	ld.param.u32 	%r8, [MemClear_param_3];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB20_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB20_2:
	mad.lo.s32 	%r12, %r14, %r8, %r7;
	mul.wide.u32 	%rd3, %r12, 4;
	add.s64 	%rd4, %rd1, %rd3;
	mov.u32 	%r13, 0;
	st.global.u32 	[%rd4], %r13;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB20_2;

$L__BB20_3:
	ret;

}
	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3,
	.param .u32 FindMinAndMax_param_4
)
{
	.reg .pred 	%p<24>;
	.reg .f32 	%f<47>;
	.reg .b32 	%r<51>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ13FindMinAndMaxE5block[4096];

	ld.param.u64 	%rd1, [FindMinAndMax_param_0];
	ld.param.u32 	%r22, [FindMinAndMax_param_1];
	ld.param.u64 	%rd2, [FindMinAndMax_param_2];
	ld.param.u64 	%rd3, [FindMinAndMax_param_3];
	ld.param.u32 	%r23, [FindMinAndMax_param_4];
	mov.u32 	%r24, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r24, %r1;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r4, %r2, %r3;
	setp.ge.u32 	%p1, %r4, %r22;
	mov.f32 	%f36, 0f00000000;
	@%p1 bra 	$L__BB21_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.lo.s32 	%r25, %r4, %r23;
	mul.wide.u32 	%rd5, %r25, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f36, [%rd6];

$L__BB21_2:
	shl.b32 	%r26, %r3, 2;
	mov.u32 	%r45, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r28, %r45, %r26;
	st.shared.f32 	[%r28], %f36;
	bar.sync 	0;
	setp.ne.s32 	%p2, %r3, 0;
	@%p2 bra 	$L__BB21_11;

	sub.s32 	%r29, %r22, %r4;
	min.u32 	%r5, %r29, 1024;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f46, 0f00800000;
	mov.f32 	%f45, 0f7F7FFFFF;
	@%p3 bra 	$L__BB21_10;

	not.b32 	%r31, %r22;
	add.s32 	%r32, %r2, %r31;
	max.u32 	%r33, %r32, -1025;
	mov.u32 	%r34, -2;
	sub.s32 	%r35, %r34, %r33;
	and.b32  	%r50, %r5, 3;
	setp.lt.u32 	%p4, %r35, 3;
	mov.f32 	%f45, 0f7F7FFFFF;
	mov.f32 	%f46, 0f00800000;
	mov.u32 	%r47, 0;
	@%p4 bra 	$L__BB21_7;

	add.s32 	%r38, %r2, -1;
	sub.s32 	%r39, %r38, %r22;
	max.u32 	%r40, %r39, -1025;
	add.s32 	%r41, %r40, %r50;
	neg.s32 	%r44, %r41;

$L__BB21_6:
	setp.eq.s32 	%p5, %r47, 0;
	ld.shared.f32 	%f25, [%r45];
	setp.gt.ftz.f32 	%p6, %f25, %f46;
	or.pred  	%p7, %p5, %p6;
	selp.f32 	%f26, %f25, %f46, %p7;
	setp.lt.ftz.f32 	%p8, %f25, %f45;
	or.pred  	%p9, %p5, %p8;
	selp.f32 	%f27, %f25, %f45, %p9;
	ld.shared.f32 	%f28, [%r45+4];
	setp.gt.ftz.f32 	%p10, %f28, %f26;
	selp.f32 	%f29, %f28, %f26, %p10;
	setp.lt.ftz.f32 	%p11, %f28, %f27;
	selp.f32 	%f30, %f28, %f27, %p11;
	ld.shared.f32 	%f31, [%r45+8];
	setp.gt.ftz.f32 	%p12, %f31, %f29;
	selp.f32 	%f32, %f31, %f29, %p12;
	setp.lt.ftz.f32 	%p13, %f31, %f30;
	selp.f32 	%f33, %f31, %f30, %p13;
	ld.shared.f32 	%f34, [%r45+12];
	setp.gt.ftz.f32 	%p14, %f34, %f32;
	selp.f32 	%f46, %f34, %f32, %p14;
	setp.lt.ftz.f32 	%p15, %f34, %f33;
	selp.f32 	%f45, %f34, %f33, %p15;
	add.s32 	%r47, %r47, 4;
	add.s32 	%r45, %r45, 16;
	add.s32 	%r44, %r44, -4;
	setp.ne.s32 	%p16, %r44, 1;
	@%p16 bra 	$L__BB21_6;

$L__BB21_7:
	setp.eq.s32 	%p17, %r50, 0;
	@%p17 bra 	$L__BB21_10;

	shl.b32 	%r42, %r47, 2;
	mov.u32 	%r43, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r48, %r43, %r42;

$L__BB21_9:
	.pragma "nounroll";
	ld.shared.f32 	%f35, [%r48];
	setp.gt.ftz.f32 	%p18, %f35, %f46;
	setp.eq.s32 	%p19, %r47, 0;
	or.pred  	%p20, %p19, %p18;
	selp.f32 	%f46, %f35, %f46, %p20;
	setp.lt.ftz.f32 	%p21, %f35, %f45;
	or.pred  	%p22, %p19, %p21;
	selp.f32 	%f45, %f35, %f45, %p22;
	add.s32 	%r47, %r47, 1;
	add.s32 	%r48, %r48, 4;
	add.s32 	%r50, %r50, -1;
	setp.ne.s32 	%p23, %r50, 0;
	@%p23 bra 	$L__BB21_9;

$L__BB21_10:
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.u32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f45;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.f32 	[%rd11], %f46;

$L__BB21_11:
	ret;

}
	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3,
	.param .u32 FindStdDev_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<48>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ10FindStdDevE5block[4096];

	ld.param.u64 	%rd1, [FindStdDev_param_0];
	ld.param.u32 	%r20, [FindStdDev_param_1];
	ld.param.f32 	%f8, [FindStdDev_param_2];
	ld.param.u64 	%rd2, [FindStdDev_param_3];
	ld.param.u32 	%r21, [FindStdDev_param_4];
	mov.u32 	%r22, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r22, %r1, %r2;
	setp.ge.u32 	%p1, %r3, %r20;
	@%p1 bra 	$L__BB22_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r23, %r3, %r21;
	mul.wide.u32 	%rd4, %r23, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f9, [%rd5];
	shl.b32 	%r24, %r2, 2;
	mov.u32 	%r25, _ZZ10FindStdDevE5block;
	add.s32 	%r26, %r25, %r24;
	st.shared.f32 	[%r26], %f9;

$L__BB22_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r2, 0;
	@%p2 bra 	$L__BB22_11;

	shl.b32 	%r4, %r1, 10;
	sub.s32 	%r27, %r20, %r4;
	min.u32 	%r5, %r27, 1024;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f31, 0f00000000;
	@%p3 bra 	$L__BB22_10;

	not.b32 	%r29, %r20;
	add.s32 	%r30, %r4, %r29;
	max.u32 	%r31, %r30, -1025;
	mov.u32 	%r32, -2;
	sub.s32 	%r33, %r32, %r31;
	and.b32  	%r47, %r5, 3;
	setp.lt.u32 	%p4, %r33, 3;
	mov.f32 	%f31, 0f00000000;
	mov.u32 	%r45, 0;
	@%p4 bra 	$L__BB22_7;

	add.s32 	%r36, %r4, -1;
	sub.s32 	%r37, %r36, %r20;
	max.u32 	%r38, %r37, -1025;
	add.s32 	%r39, %r38, %r47;
	neg.s32 	%r42, %r39;
	mov.u32 	%r43, _ZZ10FindStdDevE5block;

$L__BB22_6:
	ld.shared.f32 	%f14, [%r43];
	sub.ftz.f32 	%f15, %f14, %f8;
	fma.rn.ftz.f32 	%f16, %f15, %f15, %f31;
	ld.shared.f32 	%f17, [%r43+4];
	sub.ftz.f32 	%f18, %f17, %f8;
	fma.rn.ftz.f32 	%f19, %f18, %f18, %f16;
	ld.shared.f32 	%f20, [%r43+8];
	sub.ftz.f32 	%f21, %f20, %f8;
	fma.rn.ftz.f32 	%f22, %f21, %f21, %f19;
	ld.shared.f32 	%f23, [%r43+12];
	sub.ftz.f32 	%f24, %f23, %f8;
	fma.rn.ftz.f32 	%f31, %f24, %f24, %f22;
	add.s32 	%r45, %r45, 4;
	add.s32 	%r43, %r43, 16;
	add.s32 	%r42, %r42, -4;
	setp.ne.s32 	%p5, %r42, 1;
	@%p5 bra 	$L__BB22_6;

$L__BB22_7:
	setp.eq.s32 	%p6, %r47, 0;
	@%p6 bra 	$L__BB22_10;

	shl.b32 	%r40, %r45, 2;
	mov.u32 	%r41, _ZZ10FindStdDevE5block;
	add.s32 	%r46, %r41, %r40;

$L__BB22_9:
	.pragma "nounroll";
	ld.shared.f32 	%f25, [%r46];
	sub.ftz.f32 	%f26, %f25, %f8;
	fma.rn.ftz.f32 	%f31, %f26, %f26, %f31;
	add.s32 	%r46, %r46, 4;
	add.s32 	%r47, %r47, -1;
	setp.ne.s32 	%p7, %r47, 0;
	@%p7 bra 	$L__BB22_9;

$L__BB22_10:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f31;

$L__BB22_11:
	ret;

}
	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3,
	.param .u32 Constrain_param_4
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd3, [Constrain_param_0];
	ld.param.u32 	%r6, [Constrain_param_1];
	ld.param.f32 	%f1, [Constrain_param_2];
	ld.param.f32 	%f2, [Constrain_param_3];
	ld.param.u32 	%r7, [Constrain_param_4];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB23_5;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd3;

$L__BB23_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd4, %r11, 4;
	add.s64 	%rd2, %rd1, %rd4;
	ld.global.f32 	%f3, [%rd2];
	setp.geu.ftz.f32 	%p3, %f3, %f1;
	setp.gt.ftz.f32 	%p1, %f3, %f2;
	setp.leu.ftz.f32 	%p4, %f3, %f2;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB23_4;

	selp.f32 	%f4, %f2, %f1, %p1;
	st.global.f32 	[%rd2], %f4;

$L__BB23_4:
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p6, %r12, %r6;
	@%p6 bra 	$L__BB23_2;

$L__BB23_5:
	ret;

}
	// .globl	RoundInPlace
.visible .entry RoundInPlace(
	.param .u64 RoundInPlace_param_0,
	.param .u32 RoundInPlace_param_1,
	.param .f32 RoundInPlace_param_2,
	.param .f32 RoundInPlace_param_3,
	.param .f32 RoundInPlace_param_4,
	.param .u32 RoundInPlace_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [RoundInPlace_param_0];
	ld.param.u32 	%r7, [RoundInPlace_param_1];
	ld.param.f32 	%f1, [RoundInPlace_param_2];
	ld.param.f32 	%f2, [RoundInPlace_param_3];
	ld.param.f32 	%f3, [RoundInPlace_param_4];
	ld.param.u32 	%r8, [RoundInPlace_param_5];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r13, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r13, %r7;
	@%p1 bra 	$L__BB24_3;

	mul.lo.s32 	%r3, %r8, %r8;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB24_2:
	mul.lo.s32 	%r12, %r3, %r13;
	mul.wide.u32 	%rd3, %r12, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f4, [%rd4];
	setp.ltu.ftz.f32 	%p2, %f4, %f3;
	selp.f32 	%f5, %f1, %f2, %p2;
	st.global.f32 	[%rd4], %f5;
	add.s32 	%r13, %r13, %r4;
	setp.lt.u32 	%p3, %r13, %r7;
	@%p3 bra 	$L__BB24_2;

$L__BB24_3:
	ret;

}
	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3,
	.param .u32 Pow_param_4,
	.param .u32 Pow_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Pow_param_0];
	ld.param.u64 	%rd4, [Pow_param_1];
	ld.param.u32 	%r6, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	ld.param.u32 	%r7, [Pow_param_4];
	ld.param.u32 	%r8, [Pow_param_5];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB25_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB25_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f5;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB25_2;

$L__BB25_3:
	ret;

}
	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3,
	.param .u32 Diagonal_param_4,
	.param .u32 Diagonal_param_5
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Diagonal_param_0];
	ld.param.u64 	%rd4, [Diagonal_param_1];
	ld.param.u32 	%r7, [Diagonal_param_2];
	ld.param.u32 	%r8, [Diagonal_param_3];
	ld.param.u32 	%r9, [Diagonal_param_4];
	ld.param.u32 	%r10, [Diagonal_param_5];
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r16, %r1, %r11, %r12;
	setp.ge.u32 	%p1, %r16, %r7;
	setp.ge.u32 	%p2, %r16, %r8;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB26_3;

	mul.lo.s32 	%r3, %r9, %r7;
	mov.u32 	%r13, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r13;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB26_2:
	mad.lo.s32 	%r14, %r3, %r16, %r16;
	mul.wide.u32 	%rd5, %r14, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.lo.s32 	%r15, %r16, %r10;
	mul.wide.u32 	%rd7, %r15, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r16, %r16, %r4;
	setp.lt.u32 	%p4, %r16, %r7;
	setp.lt.u32 	%p5, %r16, %r8;
	and.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB26_2;

$L__BB26_3:
	ret;

}
	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2,
	.param .u32 L1Regularisation_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [L1Regularisation_param_0];
	ld.param.u32 	%r6, [L1Regularisation_param_1];
	ld.param.f32 	%f1, [L1Regularisation_param_2];
	ld.param.u32 	%r7, [L1Regularisation_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB27_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB27_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd3, %r11, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	setp.gt.ftz.f32 	%p2, %f2, 0f00000000;
	setp.lt.ftz.f32 	%p3, %f2, 0f00000000;
	selp.f32 	%f3, 0fBF800000, 0f00000000, %p3;
	selp.f32 	%f4, 0f3F800000, %f3, %p2;
	mul.ftz.f32 	%f5, %f4, %f1;
	sub.ftz.f32 	%f6, %f2, %f5;
	st.global.f32 	[%rd4], %f6;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p4, %r12, %r6;
	@%p4 bra 	$L__BB27_2;

$L__BB27_3:
	ret;

}
	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r10, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r11, [PointwiseDivideRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB28_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB28_2:
	@%p2 bra 	$L__BB28_5;

	mul.wide.u32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

$L__BB28_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f2, [%rd8];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB28_4;

$L__BB28_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB28_2;

$L__BB28_6:
	ret;

}
	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r10, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r11, [PointwiseDivideColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB29_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB29_2:
	@%p2 bra 	$L__BB29_5;

	mov.u32 	%r21, %r3;

$L__BB29_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mul.wide.u32 	%rd7, %r21, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd6], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB29_4;

$L__BB29_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB29_2;

$L__BB29_6:
	ret;

}
	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd5, [SplitRows_param_0];
	ld.param.u64 	%rd6, [SplitRows_param_1];
	ld.param.u64 	%rd7, [SplitRows_param_2];
	ld.param.u32 	%r10, [SplitRows_param_3];
	ld.param.u32 	%r11, [SplitRows_param_4];
	ld.param.u32 	%r12, [SplitRows_param_5];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r23, %r1, %r13, %r14;
	setp.ge.u32 	%p1, %r23, %r10;
	@%p1 bra 	$L__BB30_9;

	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	mov.u32 	%r18, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r18;
	mov.u32 	%r19, %nctaid.y;
	mul.lo.s32 	%r5, %r15, %r19;
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd6;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB30_2:
	@%p2 bra 	$L__BB30_8;

	mov.u32 	%r24, %r3;

$L__BB30_4:
	mad.lo.s32 	%r20, %r24, %r10, %r23;
	cvt.u64.u32 	%rd4, %r20;
	mul.wide.u32 	%rd8, %r20, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	setp.lt.u32 	%p3, %r24, %r12;
	@%p3 bra 	$L__BB30_6;
	bra.uni 	$L__BB30_5;

$L__BB30_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd3, %rd12;
	st.global.f32 	[%rd13], %f1;
	bra.uni 	$L__BB30_7;

$L__BB30_5:
	sub.s32 	%r21, %r24, %r12;
	mad.lo.s32 	%r22, %r21, %r10, %r23;
	mul.wide.u32 	%rd10, %r22, 4;
	add.s64 	%rd11, %rd2, %rd10;
	st.global.f32 	[%rd11], %f1;

$L__BB30_7:
	add.s32 	%r24, %r24, %r5;
	setp.lt.u32 	%p4, %r24, %r11;
	@%p4 bra 	$L__BB30_4;

$L__BB30_8:
	add.s32 	%r23, %r23, %r4;
	setp.lt.u32 	%p5, %r23, %r10;
	@%p5 bra 	$L__BB30_2;

$L__BB30_9:
	ret;

}
	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [SplitColumns_param_0];
	ld.param.u64 	%rd5, [SplitColumns_param_1];
	ld.param.u64 	%rd6, [SplitColumns_param_2];
	ld.param.u32 	%r12, [SplitColumns_param_3];
	ld.param.u32 	%r13, [SplitColumns_param_4];
	ld.param.u32 	%r14, [SplitColumns_param_5];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r1, %r15, %r16;
	setp.ge.u32 	%p1, %r25, %r12;
	@%p1 bra 	$L__BB31_9;

	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r17, %r18, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r20;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r17, %r21;
	sub.s32 	%r6, %r12, %r14;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd5;
	setp.ge.u32 	%p2, %r3, %r13;

$L__BB31_2:
	@%p2 bra 	$L__BB31_8;

	sub.s32 	%r8, %r25, %r14;
	mov.u32 	%r26, %r3;

$L__BB31_4:
	mad.lo.s32 	%r22, %r26, %r12, %r25;
	mul.wide.u32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	setp.lt.u32 	%p3, %r25, %r14;
	@%p3 bra 	$L__BB31_6;
	bra.uni 	$L__BB31_5;

$L__BB31_6:
	mad.lo.s32 	%r24, %r26, %r14, %r25;
	mul.wide.u32 	%rd11, %r24, 4;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	$L__BB31_7;

$L__BB31_5:
	mad.lo.s32 	%r23, %r26, %r6, %r8;
	mul.wide.u32 	%rd9, %r23, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f1;

$L__BB31_7:
	add.s32 	%r26, %r26, %r5;
	setp.lt.u32 	%p4, %r26, %r13;
	@%p4 bra 	$L__BB31_4;

$L__BB31_8:
	add.s32 	%r25, %r25, %r4;
	setp.lt.u32 	%p5, %r25, %r12;
	@%p5 bra 	$L__BB31_2;

$L__BB31_9:
	ret;

}
	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd7, [ConcatColumns_param_0];
	ld.param.u64 	%rd8, [ConcatColumns_param_1];
	ld.param.u64 	%rd9, [ConcatColumns_param_2];
	ld.param.u32 	%r11, [ConcatColumns_param_3];
	ld.param.u32 	%r12, [ConcatColumns_param_4];
	ld.param.u32 	%r13, [ConcatColumns_param_5];
	ld.param.u32 	%r14, [ConcatColumns_param_6];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r1, %r15, %r16;
	setp.ge.u32 	%p1, %r25, %r11;
	@%p1 bra 	$L__BB32_9;

	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r17, %r18, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r20;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r17, %r21;
	cvta.to.global.u64 	%rd1, %rd8;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd9;
	setp.ge.u32 	%p2, %r3, %r12;

$L__BB32_2:
	@%p2 bra 	$L__BB32_8;

	sub.s32 	%r7, %r25, %r13;
	mov.u32 	%r26, %r3;

$L__BB32_4:
	setp.lt.u32 	%p3, %r25, %r13;
	@%p3 bra 	$L__BB32_6;
	bra.uni 	$L__BB32_5;

$L__BB32_6:
	mad.lo.s32 	%r23, %r26, %r13, %r25;
	mul.wide.u32 	%rd11, %r23, 4;
	add.s64 	%rd14, %rd2, %rd11;
	bra.uni 	$L__BB32_7;

$L__BB32_5:
	mad.lo.s32 	%r22, %r26, %r14, %r7;
	mul.wide.u32 	%rd10, %r22, 4;
	add.s64 	%rd14, %rd1, %rd10;

$L__BB32_7:
	ld.global.nc.f32 	%f1, [%rd14];
	mad.lo.s32 	%r24, %r26, %r11, %r25;
	mul.wide.u32 	%rd12, %r24, 4;
	add.s64 	%rd13, %rd3, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r26, %r26, %r5;
	setp.lt.u32 	%p4, %r26, %r12;
	@%p4 bra 	$L__BB32_4;

$L__BB32_8:
	add.s32 	%r25, %r25, %r4;
	setp.lt.u32 	%p5, %r25, %r11;
	@%p5 bra 	$L__BB32_2;

$L__BB32_9:
	ret;

}
	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd8, [ConcatRows_param_0];
	ld.param.u64 	%rd9, [ConcatRows_param_1];
	ld.param.u64 	%rd10, [ConcatRows_param_2];
	ld.param.u32 	%r10, [ConcatRows_param_3];
	ld.param.u32 	%r11, [ConcatRows_param_4];
	ld.param.u32 	%r12, [ConcatRows_param_5];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r23, %r1, %r13, %r14;
	setp.ge.u32 	%p1, %r23, %r10;
	@%p1 bra 	$L__BB33_9;

	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	mov.u32 	%r18, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r18;
	mov.u32 	%r19, %nctaid.y;
	mul.lo.s32 	%r5, %r15, %r19;
	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd10;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB33_2:
	@%p2 bra 	$L__BB33_8;

	mov.u32 	%r24, %r3;

$L__BB33_4:
	mad.lo.s32 	%r20, %r24, %r10, %r23;
	cvt.u64.u32 	%rd4, %r20;
	setp.lt.u32 	%p3, %r24, %r12;
	@%p3 bra 	$L__BB33_6;
	bra.uni 	$L__BB33_5;

$L__BB33_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd15, %rd2, %rd12;
	bra.uni 	$L__BB33_7;

$L__BB33_5:
	sub.s32 	%r21, %r24, %r12;
	mad.lo.s32 	%r22, %r21, %r10, %r23;
	mul.wide.u32 	%rd11, %r22, 4;
	add.s64 	%rd15, %rd1, %rd11;

$L__BB33_7:
	ld.global.nc.f32 	%f1, [%rd15];
	shl.b64 	%rd13, %rd4, 2;
	add.s64 	%rd14, %rd3, %rd13;
	st.global.f32 	[%rd14], %f1;
	add.s32 	%r24, %r24, %r5;
	setp.lt.u32 	%p4, %r24, %r11;
	@%p4 bra 	$L__BB33_4;

$L__BB33_8:
	add.s32 	%r23, %r23, %r4;
	setp.lt.u32 	%p5, %r23, %r10;
	@%p5 bra 	$L__BB33_2;

$L__BB33_9:
	ret;

}
	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3,
	.param .u32 EuclideanDistance_param_4,
	.param .u32 EuclideanDistance_param_5,
	.param .u32 EuclideanDistance_param_6
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [EuclideanDistance_param_0];
	ld.param.u64 	%rd5, [EuclideanDistance_param_1];
	ld.param.u64 	%rd6, [EuclideanDistance_param_2];
	ld.param.u32 	%r6, [EuclideanDistance_param_3];
	ld.param.u32 	%r7, [EuclideanDistance_param_4];
	ld.param.u32 	%r8, [EuclideanDistance_param_5];
	ld.param.u32 	%r9, [EuclideanDistance_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r16, %r1, %r10, %r11;
	setp.ge.u32 	%p1, %r16, %r6;
	@%p1 bra 	$L__BB34_3;

	mov.u32 	%r12, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r12;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB34_2:
	mul.lo.s32 	%r13, %r16, %r7;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd1, %rd7;
	mul.lo.s32 	%r14, %r16, %r8;
	mul.wide.u32 	%rd9, %r14, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	mul.lo.s32 	%r15, %r16, %r9;
	mul.wide.u32 	%rd11, %r15, 4;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.f32 	[%rd12], %f4;
	add.s32 	%r16, %r16, %r3;
	setp.lt.u32 	%p2, %r16, %r6;
	@%p2 bra 	$L__BB34_2;

$L__BB34_3:
	ret;

}
	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3,
	.param .u32 ManhattanDistance_param_4,
	.param .u32 ManhattanDistance_param_5,
	.param .u32 ManhattanDistance_param_6
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [ManhattanDistance_param_0];
	ld.param.u64 	%rd5, [ManhattanDistance_param_1];
	ld.param.u64 	%rd6, [ManhattanDistance_param_2];
	ld.param.u32 	%r6, [ManhattanDistance_param_3];
	ld.param.u32 	%r7, [ManhattanDistance_param_4];
	ld.param.u32 	%r8, [ManhattanDistance_param_5];
	ld.param.u32 	%r9, [ManhattanDistance_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r16, %r1, %r10, %r11;
	setp.ge.u32 	%p1, %r16, %r6;
	@%p1 bra 	$L__BB35_3;

	mov.u32 	%r12, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r12;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB35_2:
	mul.lo.s32 	%r13, %r16, %r7;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd1, %rd7;
	mul.lo.s32 	%r14, %r16, %r8;
	mul.wide.u32 	%rd9, %r14, 4;
	add.s64 	%rd10, %rd2, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	mul.lo.s32 	%r15, %r16, %r9;
	mul.wide.u32 	%rd11, %r15, 4;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.f32 	[%rd12], %f4;
	add.s32 	%r16, %r16, %r3;
	setp.lt.u32 	%p2, %r16, %r6;
	@%p2 bra 	$L__BB35_2;

$L__BB35_3:
	ret;

}
	// .globl	CosineDistance
.visible .entry CosineDistance(
	.param .u64 CosineDistance_param_0,
	.param .u64 CosineDistance_param_1,
	.param .u64 CosineDistance_param_2,
	.param .u64 CosineDistance_param_3,
	.param .u64 CosineDistance_param_4,
	.param .u32 CosineDistance_param_5,
	.param .u32 CosineDistance_param_6,
	.param .u32 CosineDistance_param_7
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd6, [CosineDistance_param_0];
	ld.param.u64 	%rd7, [CosineDistance_param_1];
	ld.param.u64 	%rd8, [CosineDistance_param_2];
	ld.param.u64 	%rd9, [CosineDistance_param_3];
	ld.param.u64 	%rd10, [CosineDistance_param_4];
	ld.param.u32 	%r6, [CosineDistance_param_5];
	ld.param.u32 	%r7, [CosineDistance_param_6];
	ld.param.u32 	%r8, [CosineDistance_param_7];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB36_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd8;
	cvta.to.global.u64 	%rd4, %rd9;
	cvta.to.global.u64 	%rd5, %rd10;

$L__BB36_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd11, %r12, 4;
	add.s64 	%rd12, %rd1, %rd11;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd13, %r13, 4;
	add.s64 	%rd14, %rd2, %rd13;
	ld.global.nc.f32 	%f1, [%rd14];
	ld.global.nc.f32 	%f2, [%rd12];
	mul.ftz.f32 	%f3, %f2, %f2;
	atom.global.add.f32 	%f4, [%rd3], %f3;
	mul.ftz.f32 	%f5, %f2, %f1;
	atom.global.add.f32 	%f6, [%rd4], %f5;
	mul.ftz.f32 	%f7, %f1, %f1;
	atom.global.add.f32 	%f8, [%rd5], %f7;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB36_2;

$L__BB36_3:
	ret;

}
	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2,
	.param .u32 Abs_param_3,
	.param .u32 Abs_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Abs_param_0];
	ld.param.u64 	%rd4, [Abs_param_1];
	ld.param.u32 	%r6, [Abs_param_2];
	ld.param.u32 	%r7, [Abs_param_3];
	ld.param.u32 	%r8, [Abs_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB37_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB37_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f2;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB37_2;

$L__BB37_3:
	ret;

}
	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2,
	.param .u32 Log_param_3,
	.param .u32 Log_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Log_param_0];
	ld.param.u64 	%rd4, [Log_param_1];
	ld.param.u32 	%r6, [Log_param_2];
	ld.param.u32 	%r7, [Log_param_3];
	ld.param.u32 	%r8, [Log_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB38_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB38_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB38_2;

$L__BB38_3:
	ret;

}
	// .globl	Exp
.visible .entry Exp(
	.param .u64 Exp_param_0,
	.param .u64 Exp_param_1,
	.param .u32 Exp_param_2,
	.param .u32 Exp_param_3,
	.param .u32 Exp_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Exp_param_0];
	ld.param.u64 	%rd4, [Exp_param_1];
	ld.param.u32 	%r6, [Exp_param_2];
	ld.param.u32 	%r7, [Exp_param_3];
	ld.param.u32 	%r8, [Exp_param_4];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	$L__BB39_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB39_2:
	mul.lo.s32 	%r12, %r14, %r7;
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	mul.lo.s32 	%r13, %r14, %r8;
	mul.wide.u32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	$L__BB39_2;

$L__BB39_3:
	ret;

}
	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3,
	.param .u32 Normalise_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Normalise_param_0];
	ld.param.u32 	%r6, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	ld.param.u32 	%r7, [Normalise_param_4];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB40_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB40_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd3, %r11, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB40_2;

$L__BB40_3:
	ret;

}
	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3,
	.param .u32 SoftmaxVector_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SoftmaxVector_param_0];
	ld.param.u64 	%rd4, [SoftmaxVector_param_1];
	ld.param.u32 	%r6, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	ld.param.u32 	%r7, [SoftmaxVector_param_4];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB41_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB41_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	mul.wide.u32 	%rd7, %r12, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f5;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB41_2;

$L__BB41_3:
	ret;

}
	// .globl	VectorAddInPlace
.visible .entry VectorAddInPlace(
	.param .u64 VectorAddInPlace_param_0,
	.param .u32 VectorAddInPlace_param_1,
	.param .f32 VectorAddInPlace_param_2,
	.param .u32 VectorAddInPlace_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [VectorAddInPlace_param_0];
	ld.param.u32 	%r6, [VectorAddInPlace_param_1];
	ld.param.f32 	%f1, [VectorAddInPlace_param_2];
	ld.param.u32 	%r7, [VectorAddInPlace_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	$L__BB42_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB42_2:
	mul.lo.s32 	%r11, %r12, %r7;
	mul.wide.u32 	%rd3, %r11, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	$L__BB42_2;

$L__BB42_3:
	ret;

}
	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3,
	.param .u32 VectorCopyRandom_param_4,
	.param .u32 VectorCopyRandom_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd5, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd6, [VectorCopyRandom_param_2];
	ld.param.u32 	%r6, [VectorCopyRandom_param_3];
	ld.param.u32 	%r7, [VectorCopyRandom_param_4];
	ld.param.u32 	%r8, [VectorCopyRandom_param_5];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r15, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r15, %r6;
	@%p1 bra 	$L__BB43_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd5;

$L__BB43_2:
	mul.wide.u32 	%rd7, %r15, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.u32 	%r12, [%rd8];
	mul.lo.s32 	%r13, %r12, %r7;
	mul.wide.u32 	%rd9, %r13, 4;
	add.s64 	%rd10, %rd2, %rd9;
	mul.lo.s32 	%r14, %r15, %r8;
	mul.wide.u32 	%rd11, %r14, 4;
	add.s64 	%rd12, %rd3, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.nc.f32 	%f2, [%rd10];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd12], %f3;
	add.s32 	%r15, %r15, %r3;
	setp.lt.u32 	%p2, %r15, %r6;
	@%p2 bra 	$L__BB43_2;

$L__BB43_3:
	ret;

}
	// .globl	CopyToMatrixRows
.visible .entry CopyToMatrixRows(
	.param .u64 CopyToMatrixRows_param_0,
	.param .u64 CopyToMatrixRows_param_1,
	.param .u32 CopyToMatrixRows_param_2,
	.param .u32 CopyToMatrixRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [CopyToMatrixRows_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixRows_param_1];
	ld.param.u32 	%r10, [CopyToMatrixRows_param_2];
	ld.param.u32 	%r11, [CopyToMatrixRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB44_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB44_2:
	@%p2 bra 	$L__BB44_5;

	mul.wide.u32 	%rd6, %r20, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd3, %rd8;
	mov.u32 	%r21, %r3;

$L__BB44_4:
	mul.wide.u32 	%rd9, %r21, 4;
	add.s64 	%rd10, %rd3, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd11, %r19, 4;
	add.s64 	%rd12, %rd2, %rd11;
	st.global.f32 	[%rd12], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB44_4;

$L__BB44_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB44_2;

$L__BB44_6:
	ret;

}
	// .globl	CopyToMatrixColumns
.visible .entry CopyToMatrixColumns(
	.param .u64 CopyToMatrixColumns_param_0,
	.param .u64 CopyToMatrixColumns_param_1,
	.param .u32 CopyToMatrixColumns_param_2,
	.param .u32 CopyToMatrixColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd4, [CopyToMatrixColumns_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixColumns_param_1];
	ld.param.u32 	%r10, [CopyToMatrixColumns_param_2];
	ld.param.u32 	%r11, [CopyToMatrixColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	$L__BB45_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

$L__BB45_2:
	@%p2 bra 	$L__BB45_5;

	cvt.u64.u32 	%rd3, %r20;
	mov.u32 	%r21, %r3;

$L__BB45_4:
	mul.wide.u32 	%rd6, %r21, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd9, %rd8;
	shl.b64 	%rd10, %rd3, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f1, [%rd11];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd12, %r19, 4;
	add.s64 	%rd13, %rd2, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	$L__BB45_4;

$L__BB45_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	$L__BB45_2;

$L__BB45_6:
	ret;

}
	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u32 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u64 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7,
	.param .u32 TensorAddPadding_param_8,
	.param .u32 TensorAddPadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<19>;


	ld.param.u32 	%r15, [TensorAddPadding_param_0];
	ld.param.u64 	%rd3, [TensorAddPadding_param_1];
	ld.param.u64 	%rd4, [TensorAddPadding_param_2];
	ld.param.u32 	%r16, [TensorAddPadding_param_3];
	ld.param.u32 	%r17, [TensorAddPadding_param_4];
	ld.param.u32 	%r18, [TensorAddPadding_param_5];
	ld.param.u32 	%r19, [TensorAddPadding_param_7];
	ld.param.u32 	%r20, [TensorAddPadding_param_8];
	ld.param.u32 	%r21, [TensorAddPadding_param_9];
	mov.u32 	%r22, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r23, %tid.x;
	mad.lo.s32 	%r40, %r1, %r22, %r23;
	setp.ge.u32 	%p1, %r40, %r15;
	@%p1 bra 	$L__BB46_5;

	sub.s32 	%r3, %r19, %r21;
	sub.s32 	%r4, %r20, %r21;
	mul.lo.s32 	%r24, %r17, %r16;
	mul.lo.s32 	%r5, %r24, %r18;
	mul.lo.s32 	%r6, %r20, %r19;
	mul.lo.s32 	%r7, %r6, %r18;
	mov.u32 	%r25, %nctaid.x;
	mul.lo.s32 	%r8, %r1, %r25;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f3, 0f00000000;

$L__BB46_2:
	div.u32 	%r26, %r40, %r19;
	div.u32 	%r27, %r26, %r20;
	mul.lo.s32 	%r28, %r27, %r20;
	sub.s32 	%r10, %r26, %r28;
	div.u32 	%r12, %r27, %r18;
	mul.lo.s32 	%r29, %r12, %r18;
	sub.s32 	%r11, %r27, %r29;
	mul.lo.s32 	%r30, %r26, %r19;
	sub.s32 	%r13, %r40, %r30;
	setp.lt.u32 	%p2, %r13, %r21;
	setp.ge.u32 	%p3, %r13, %r3;
	or.pred  	%p4, %p3, %p2;
	setp.lt.u32 	%p5, %r10, %r21;
	or.pred  	%p6, %p4, %p5;
	setp.ge.u32 	%p7, %r10, %r4;
	or.pred  	%p8, %p7, %p6;
	mov.f32 	%f4, %f3;
	@%p8 bra 	$L__BB46_4;

	mul.lo.s32 	%r31, %r5, %r12;
	cvt.u64.u32 	%rd5, %r31;
	mul.lo.s32 	%r33, %r11, %r24;
	cvt.u64.u32 	%rd6, %r33;
	sub.s32 	%r34, %r10, %r21;
	sub.s32 	%r35, %r13, %r21;
	mad.lo.s32 	%r36, %r34, %r16, %r35;
	cvt.u64.u32 	%rd7, %r36;
	add.s64 	%rd8, %rd7, %rd6;
	add.s64 	%rd9, %rd8, %rd5;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.f32 	%f4, [%rd11];

$L__BB46_4:
	mul.lo.s32 	%r37, %r7, %r12;
	cvt.u64.u32 	%rd12, %r37;
	mul.lo.s32 	%r38, %r11, %r6;
	cvt.u64.u32 	%rd13, %r38;
	mad.lo.s32 	%r39, %r10, %r19, %r13;
	cvt.u64.u32 	%rd14, %r39;
	add.s64 	%rd15, %rd13, %rd14;
	add.s64 	%rd16, %rd15, %rd12;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd2, %rd17;
	st.global.f32 	[%rd18], %f4;
	add.s32 	%r40, %r40, %r8;
	setp.lt.u32 	%p9, %r40, %r15;
	@%p9 bra 	$L__BB46_2;

$L__BB46_5:
	ret;

}
	// .globl	TensorRemovePadding
.visible .entry TensorRemovePadding(
	.param .u32 TensorRemovePadding_param_0,
	.param .u64 TensorRemovePadding_param_1,
	.param .u64 TensorRemovePadding_param_2,
	.param .u32 TensorRemovePadding_param_3,
	.param .u32 TensorRemovePadding_param_4,
	.param .u32 TensorRemovePadding_param_5,
	.param .u32 TensorRemovePadding_param_6,
	.param .u32 TensorRemovePadding_param_7,
	.param .u32 TensorRemovePadding_param_8,
	.param .u32 TensorRemovePadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<19>;


	ld.param.u32 	%r15, [TensorRemovePadding_param_0];
	ld.param.u64 	%rd3, [TensorRemovePadding_param_1];
	ld.param.u64 	%rd4, [TensorRemovePadding_param_2];
	ld.param.u32 	%r16, [TensorRemovePadding_param_3];
	ld.param.u32 	%r17, [TensorRemovePadding_param_4];
	ld.param.u32 	%r18, [TensorRemovePadding_param_5];
	ld.param.u32 	%r19, [TensorRemovePadding_param_7];
	ld.param.u32 	%r20, [TensorRemovePadding_param_8];
	ld.param.u32 	%r21, [TensorRemovePadding_param_9];
	mov.u32 	%r22, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r23, %tid.x;
	mad.lo.s32 	%r38, %r1, %r22, %r23;
	setp.ge.u32 	%p1, %r38, %r15;
	@%p1 bra 	$L__BB47_5;

	sub.s32 	%r3, %r16, %r21;
	sub.s32 	%r4, %r17, %r21;
	mul.lo.s32 	%r5, %r17, %r16;
	mul.lo.s32 	%r6, %r5, %r18;
	mul.lo.s32 	%r7, %r20, %r19;
	mul.lo.s32 	%r8, %r7, %r18;
	mov.u32 	%r24, %nctaid.x;
	mul.lo.s32 	%r9, %r1, %r24;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

$L__BB47_2:
	div.u32 	%r11, %r38, %r16;
	rem.u32 	%r12, %r11, %r17;
	mul.lo.s32 	%r25, %r11, %r16;
	sub.s32 	%r13, %r38, %r25;
	setp.lt.u32 	%p2, %r13, %r21;
	setp.ge.u32 	%p3, %r13, %r3;
	or.pred  	%p4, %p3, %p2;
	setp.lt.u32 	%p5, %r12, %r21;
	or.pred  	%p6, %p4, %p5;
	setp.ge.u32 	%p7, %r12, %r4;
	or.pred  	%p8, %p7, %p6;
	@%p8 bra 	$L__BB47_4;

	div.u32 	%r26, %r11, %r17;
	div.u32 	%r27, %r26, %r18;
	mul.lo.s32 	%r28, %r27, %r18;
	sub.s32 	%r29, %r26, %r28;
	mul.lo.s32 	%r30, %r6, %r27;
	cvt.u64.u32 	%rd5, %r30;
	mul.lo.s32 	%r31, %r29, %r5;
	cvt.u64.u32 	%rd6, %r31;
	mad.lo.s32 	%r32, %r12, %r16, %r13;
	cvt.u64.u32 	%rd7, %r32;
	add.s64 	%rd8, %rd6, %rd7;
	add.s64 	%rd9, %rd8, %rd5;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.nc.f32 	%f1, [%rd11];
	mul.lo.s32 	%r33, %r8, %r27;
	cvt.u64.u32 	%rd12, %r33;
	mul.lo.s32 	%r34, %r29, %r7;
	cvt.u64.u32 	%rd13, %r34;
	sub.s32 	%r35, %r12, %r21;
	sub.s32 	%r36, %r13, %r21;
	mad.lo.s32 	%r37, %r35, %r19, %r36;
	cvt.u64.u32 	%rd14, %r37;
	add.s64 	%rd15, %rd13, %rd14;
	add.s64 	%rd16, %rd15, %rd12;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd2, %rd17;
	st.global.f32 	[%rd18], %f1;

$L__BB47_4:
	add.s32 	%r38, %r38, %r9;
	setp.lt.u32 	%p9, %r38, %r15;
	@%p9 bra 	$L__BB47_2;

$L__BB47_5:
	ret;

}
	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u32 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u64 TensorIm2Col_param_2,
	.param .u64 TensorIm2Col_param_3,
	.param .u64 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9,
	.param .u32 TensorIm2Col_param_10,
	.param .u32 TensorIm2Col_param_11,
	.param .u32 TensorIm2Col_param_12,
	.param .u32 TensorIm2Col_param_13,
	.param .u32 TensorIm2Col_param_14,
	.param .u32 TensorIm2Col_param_15
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<24>;


	ld.param.u32 	%r9, [TensorIm2Col_param_0];
	ld.param.u64 	%rd5, [TensorIm2Col_param_1];
	ld.param.u64 	%rd6, [TensorIm2Col_param_2];
	ld.param.u64 	%rd7, [TensorIm2Col_param_3];
	ld.param.u64 	%rd8, [TensorIm2Col_param_4];
	ld.param.u32 	%r10, [TensorIm2Col_param_5];
	ld.param.u32 	%r11, [TensorIm2Col_param_6];
	ld.param.u32 	%r12, [TensorIm2Col_param_7];
	ld.param.u32 	%r13, [TensorIm2Col_param_9];
	ld.param.u32 	%r14, [TensorIm2Col_param_10];
	ld.param.u32 	%r15, [TensorIm2Col_param_11];
	ld.param.u32 	%r16, [TensorIm2Col_param_12];
	ld.param.u32 	%r17, [TensorIm2Col_param_13];
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r44, %r1, %r18, %r19;
	setp.ge.u32 	%p1, %r44, %r9;
	@%p1 bra 	$L__BB48_3;

	mul.lo.s32 	%r3, %r14, %r13;
	mul.lo.s32 	%r4, %r11, %r10;
	mul.lo.s32 	%r5, %r4, %r12;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r6, %r1, %r20;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	cvta.to.global.u64 	%rd4, %rd6;

$L__BB48_2:
	div.u32 	%r21, %r44, %r16;
	div.u32 	%r22, %r21, %r17;
	mul.lo.s32 	%r23, %r22, %r17;
	sub.s32 	%r24, %r21, %r23;
	div.u32 	%r25, %r22, %r12;
	mul.lo.s32 	%r26, %r25, %r12;
	sub.s32 	%r27, %r22, %r26;
	div.u32 	%r28, %r25, %r15;
	mul.lo.s32 	%r29, %r28, %r15;
	sub.s32 	%r30, %r25, %r29;
	mul.wide.u32 	%rd9, %r30, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	cvt.rzi.ftz.u32.f32 	%r31, %f1;
	add.s64 	%rd11, %rd2, %rd9;
	ld.global.nc.f32 	%f2, [%rd11];
	cvt.rzi.ftz.u32.f32 	%r32, %f2;
	mul.lo.s32 	%r33, %r21, %r16;
	sub.s32 	%r34, %r44, %r33;
	mad.lo.s32 	%r35, %r27, %r16, %r34;
	mad.lo.s32 	%r36, %r35, %r17, %r24;
	mul.lo.s32 	%r37, %r3, %r28;
	cvt.u64.u32 	%rd12, %r37;
	mul.lo.s32 	%r38, %r5, %r28;
	cvt.u64.u32 	%rd13, %r38;
	mul.lo.s32 	%r39, %r27, %r4;
	cvt.u64.u32 	%rd14, %r39;
	add.s64 	%rd15, %rd13, %rd14;
	add.s32 	%r40, %r31, %r34;
	add.s32 	%r41, %r32, %r24;
	mad.lo.s32 	%r42, %r40, %r10, %r41;
	cvt.u64.u32 	%rd16, %r42;
	add.s64 	%rd17, %rd15, %rd16;
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd3, %rd18;
	ld.global.nc.f32 	%f3, [%rd19];
	mad.lo.s32 	%r43, %r36, %r13, %r30;
	cvt.u64.u32 	%rd20, %r43;
	add.s64 	%rd21, %rd20, %rd12;
	shl.b64 	%rd22, %rd21, 2;
	add.s64 	%rd23, %rd4, %rd22;
	st.global.f32 	[%rd23], %f3;
	add.s32 	%r44, %r44, %r6;
	setp.lt.u32 	%p2, %r44, %r9;
	@%p2 bra 	$L__BB48_2;

$L__BB48_3:
	ret;

}
	// .globl	TensorReverseIm2Col
.visible .entry TensorReverseIm2Col(
	.param .u32 TensorReverseIm2Col_param_0,
	.param .u64 TensorReverseIm2Col_param_1,
	.param .u64 TensorReverseIm2Col_param_2,
	.param .u64 TensorReverseIm2Col_param_3,
	.param .u64 TensorReverseIm2Col_param_4,
	.param .u64 TensorReverseIm2Col_param_5,
	.param .u32 TensorReverseIm2Col_param_6,
	.param .u32 TensorReverseIm2Col_param_7,
	.param .u32 TensorReverseIm2Col_param_8,
	.param .u32 TensorReverseIm2Col_param_9,
	.param .u32 TensorReverseIm2Col_param_10,
	.param .u32 TensorReverseIm2Col_param_11,
	.param .u32 TensorReverseIm2Col_param_12,
	.param .u32 TensorReverseIm2Col_param_13,
	.param .u32 TensorReverseIm2Col_param_14,
	.param .u32 TensorReverseIm2Col_param_15,
	.param .u32 TensorReverseIm2Col_param_16,
	.param .u32 TensorReverseIm2Col_param_17
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<58>;
	.reg .b64 	%rd<35>;


	ld.param.u32 	%r19, [TensorReverseIm2Col_param_0];
	ld.param.u64 	%rd6, [TensorReverseIm2Col_param_1];
	ld.param.u64 	%rd7, [TensorReverseIm2Col_param_2];
	ld.param.u64 	%rd8, [TensorReverseIm2Col_param_3];
	ld.param.u64 	%rd9, [TensorReverseIm2Col_param_4];
	ld.param.u64 	%rd10, [TensorReverseIm2Col_param_5];
	ld.param.u32 	%r20, [TensorReverseIm2Col_param_6];
	ld.param.u32 	%r21, [TensorReverseIm2Col_param_7];
	ld.param.u32 	%r22, [TensorReverseIm2Col_param_8];
	ld.param.u32 	%r23, [TensorReverseIm2Col_param_10];
	ld.param.u32 	%r24, [TensorReverseIm2Col_param_11];
	ld.param.u32 	%r25, [TensorReverseIm2Col_param_12];
	ld.param.u32 	%r26, [TensorReverseIm2Col_param_13];
	ld.param.u32 	%r27, [TensorReverseIm2Col_param_14];
	ld.param.u32 	%r28, [TensorReverseIm2Col_param_15];
	ld.param.u32 	%r29, [TensorReverseIm2Col_param_16];
	ld.param.u32 	%r30, [TensorReverseIm2Col_param_17];
	mov.u32 	%r31, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r32, %tid.x;
	mad.lo.s32 	%r57, %r1, %r31, %r32;
	setp.ge.u32 	%p1, %r57, %r19;
	@%p1 bra 	$L__BB49_5;

	mul.lo.s32 	%r3, %r21, %r20;
	mul.lo.s32 	%r4, %r3, %r22;
	mul.lo.s32 	%r5, %r25, %r24;
	mul.lo.s32 	%r6, %r5, %r30;
	mul.lo.s32 	%r7, %r29, %r28;
	mul.lo.s32 	%r8, %r7, %r30;
	mov.u32 	%r33, %nctaid.x;
	mul.lo.s32 	%r9, %r1, %r33;
	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd10;
	cvta.to.global.u64 	%rd3, %rd6;
	cvta.to.global.u64 	%rd4, %rd7;
	cvta.to.global.u64 	%rd5, %rd8;

$L__BB49_2:
	div.u32 	%r11, %r57, %r30;
	div.u32 	%r12, %r11, %r24;
	div.u32 	%r13, %r12, %r25;
	rem.u32 	%r34, %r13, %r23;
	mul.wide.u32 	%rd11, %r34, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	cvt.rzi.ftz.u32.f32 	%r14, %f1;
	add.s64 	%rd13, %rd2, %rd11;
	ld.global.nc.f32 	%f2, [%rd13];
	cvt.rzi.ftz.u32.f32 	%r15, %f2;
	div.u32 	%r16, %r14, %r26;
	div.u32 	%r17, %r15, %r27;
	setp.ge.u32 	%p2, %r16, %r21;
	setp.ge.u32 	%p3, %r17, %r20;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	$L__BB49_4;

	rem.u32 	%r35, %r11, %r24;
	rem.u32 	%r36, %r12, %r25;
	div.u32 	%r37, %r13, %r23;
	div.u32 	%r38, %r37, %r22;
	mul.lo.s32 	%r39, %r38, %r22;
	sub.s32 	%r40, %r37, %r39;
	rem.u32 	%r41, %r57, %r30;
	mul.lo.s32 	%r42, %r5, %r41;
	cvt.u64.u32 	%rd14, %r42;
	mad.lo.s32 	%r43, %r16, %r20, %r17;
	cvt.u64.u32 	%rd15, %r43;
	mul.lo.s32 	%r44, %r3, %r40;
	cvt.u64.u32 	%rd16, %r44;
	mul.lo.s32 	%r45, %r4, %r38;
	cvt.u64.u32 	%rd17, %r45;
	add.s64 	%rd18, %rd17, %rd16;
	add.s64 	%rd19, %rd18, %rd15;
	shl.b64 	%rd20, %rd19, 2;
	add.s64 	%rd21, %rd3, %rd20;
	not.b32 	%r46, %r35;
	add.s32 	%r47, %r46, %r24;
	not.b32 	%r48, %r36;
	add.s32 	%r49, %r48, %r25;
	mad.lo.s32 	%r50, %r47, %r25, %r49;
	add.s32 	%r51, %r14, %r35;
	add.s32 	%r52, %r15, %r36;
	mad.lo.s32 	%r53, %r51, %r28, %r52;
	cvt.u64.u32 	%rd22, %r50;
	add.s64 	%rd23, %rd22, %rd14;
	mul.lo.s32 	%r54, %r6, %r40;
	cvt.u64.u32 	%rd24, %r54;
	add.s64 	%rd25, %rd23, %rd24;
	shl.b64 	%rd26, %rd25, 2;
	add.s64 	%rd27, %rd4, %rd26;
	ld.global.nc.f32 	%f3, [%rd27];
	ld.global.nc.f32 	%f4, [%rd21];
	mul.ftz.f32 	%f5, %f4, %f3;
	cvt.u64.u32 	%rd28, %r53;
	mul.lo.s32 	%r55, %r7, %r41;
	cvt.u64.u32 	%rd29, %r55;
	mul.lo.s32 	%r56, %r8, %r38;
	cvt.u64.u32 	%rd30, %r56;
	add.s64 	%rd31, %rd30, %rd29;
	add.s64 	%rd32, %rd31, %rd28;
	shl.b64 	%rd33, %rd32, 2;
	add.s64 	%rd34, %rd5, %rd33;
	atom.global.add.f32 	%f6, [%rd34], %f5;

$L__BB49_4:
	add.s32 	%r57, %r57, %r9;
	setp.lt.u32 	%p5, %r57, %r19;
	@%p5 bra 	$L__BB49_2;

$L__BB49_5:
	ret;

}
	// .globl	SoftmaxDerivative
.visible .entry SoftmaxDerivative(
	.param .u64 SoftmaxDerivative_param_0,
	.param .u64 SoftmaxDerivative_param_1,
	.param .u32 SoftmaxDerivative_param_2,
	.param .u32 SoftmaxDerivative_param_3
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [SoftmaxDerivative_param_0];
	ld.param.u64 	%rd3, [SoftmaxDerivative_param_1];
	ld.param.u32 	%r10, [SoftmaxDerivative_param_2];
	ld.param.u32 	%r11, [SoftmaxDerivative_param_3];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r22, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r22, %r10;
	@%p1 bra 	$L__BB50_8;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r10;
	mov.f32 	%f5, 0f3F800000;

$L__BB50_2:
	@%p2 bra 	$L__BB50_7;

	mul.lo.s32 	%r19, %r22, %r11;
	mul.wide.u32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	sub.ftz.f32 	%f6, %f5, %f1;
	mul.ftz.f32 	%f2, %f1, %f6;
	mov.u32 	%r23, %r3;

$L__BB50_4:
	setp.eq.s32 	%p3, %r22, %r23;
	mov.f32 	%f9, %f2;
	@%p3 bra 	$L__BB50_6;

	mul.lo.s32 	%r20, %r23, %r11;
	mul.wide.u32 	%rd7, %r20, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f7, [%rd8];
	mul.ftz.f32 	%f8, %f1, %f7;
	neg.ftz.f32 	%f9, %f8;

$L__BB50_6:
	mad.lo.s32 	%r21, %r23, %r10, %r22;
	mul.wide.u32 	%rd9, %r21, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f9;
	add.s32 	%r23, %r23, %r5;
	setp.lt.u32 	%p4, %r23, %r10;
	@%p4 bra 	$L__BB50_4;

$L__BB50_7:
	add.s32 	%r22, %r22, %r4;
	setp.lt.u32 	%p5, %r22, %r10;
	@%p5 bra 	$L__BB50_2;

$L__BB50_8:
	ret;

}
	// .globl	RotateInPlace
.visible .entry RotateInPlace(
	.param .u64 RotateInPlace_param_0,
	.param .u32 RotateInPlace_param_1,
	.param .u32 RotateInPlace_param_2,
	.param .u32 RotateInPlace_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [RotateInPlace_param_0];
	ld.param.u32 	%r6, [RotateInPlace_param_1];
	ld.param.u32 	%r7, [RotateInPlace_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r16, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r16, %r6;
	@%p1 bra 	$L__BB51_3;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;

$L__BB51_2:
	rem.u32 	%r11, %r16, %r7;
	sub.s32 	%r12, %r16, %r11;
	not.b32 	%r13, %r11;
	add.s32 	%r14, %r13, %r7;
	add.s32 	%r15, %r14, %r12;
	mul.wide.u32 	%rd3, %r15, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mul.wide.u32 	%rd5, %r16, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f2, [%rd6];
	st.global.f32 	[%rd4], %f2;
	st.global.f32 	[%rd6], %f1;
	add.s32 	%r16, %r16, %r3;
	setp.lt.u32 	%p2, %r16, %r6;
	@%p2 bra 	$L__BB51_2;

$L__BB51_3:
	ret;

}
	// .globl	TensorMaxPool
.visible .entry TensorMaxPool(
	.param .u32 TensorMaxPool_param_0,
	.param .u64 TensorMaxPool_param_1,
	.param .u64 TensorMaxPool_param_2,
	.param .u64 TensorMaxPool_param_3,
	.param .u64 TensorMaxPool_param_4,
	.param .u64 TensorMaxPool_param_5,
	.param .u32 TensorMaxPool_param_6,
	.param .u32 TensorMaxPool_param_7,
	.param .u32 TensorMaxPool_param_8,
	.param .u32 TensorMaxPool_param_9,
	.param .u32 TensorMaxPool_param_10,
	.param .u32 TensorMaxPool_param_11,
	.param .u32 TensorMaxPool_param_12,
	.param .u32 TensorMaxPool_param_13,
	.param .u32 TensorMaxPool_param_14,
	.param .u32 TensorMaxPool_param_15,
	.param .u32 TensorMaxPool_param_16,
	.param .u32 TensorMaxPool_param_17
)
{
	.reg .pred 	%p<35>;
	.reg .f32 	%f<35>;
	.reg .b32 	%r<131>;
	.reg .b64 	%rd<62>;


	ld.param.u32 	%r46, [TensorMaxPool_param_0];
	ld.param.u64 	%rd9, [TensorMaxPool_param_1];
	ld.param.u64 	%rd10, [TensorMaxPool_param_2];
	ld.param.u64 	%rd11, [TensorMaxPool_param_3];
	ld.param.u64 	%rd12, [TensorMaxPool_param_4];
	ld.param.u64 	%rd13, [TensorMaxPool_param_5];
	ld.param.u32 	%r47, [TensorMaxPool_param_6];
	ld.param.u32 	%r48, [TensorMaxPool_param_7];
	ld.param.u32 	%r49, [TensorMaxPool_param_8];
	ld.param.u32 	%r51, [TensorMaxPool_param_11];
	ld.param.u32 	%r52, [TensorMaxPool_param_12];
	ld.param.u32 	%r53, [TensorMaxPool_param_13];
	ld.param.u32 	%r54, [TensorMaxPool_param_14];
	ld.param.u32 	%r55, [TensorMaxPool_param_15];
	ld.param.u32 	%r56, [TensorMaxPool_param_16];
	ld.param.u32 	%r57, [TensorMaxPool_param_17];
	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd10;
	cvta.to.global.u64 	%rd3, %rd11;
	cvta.to.global.u64 	%rd4, %rd13;
	cvta.to.global.u64 	%rd5, %rd12;
	mov.u32 	%r58, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r59, %tid.x;
	mad.lo.s32 	%r115, %r1, %r58, %r59;
	setp.ge.u32 	%p1, %r115, %r46;
	@%p1 bra 	$L__BB52_21;

	mul.lo.s32 	%r3, %r52, %r51;
	mov.u32 	%r60, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r60;
	setp.eq.s32 	%p2, %r53, 0;
	@%p2 bra 	$L__BB52_17;

	mul.lo.s32 	%r5, %r49, %r48;
	add.s32 	%r6, %r54, -1;
	and.b32  	%r7, %r54, 3;
	sub.s32 	%r8, %r7, %r54;
	setp.eq.s32 	%p3, %r54, 0;
	mov.f32 	%f11, 0f00000000;
	setp.eq.s32 	%p31, %r57, 0;
	setp.lt.u32 	%p4, %r6, 3;
	setp.eq.s32 	%p18, %r7, 0;

$L__BB52_3:
	ld.param.u32 	%r111, [TensorMaxPool_param_9];
	ld.param.u32 	%r110, [TensorMaxPool_param_6];
	div.u32 	%r62, %r115, %r110;
	div.u32 	%r63, %r62, %r111;
	mul.lo.s32 	%r13, %r63, %r111;
	sub.s32 	%r10, %r62, %r13;
	mul.lo.s32 	%r64, %r62, %r110;
	sub.s32 	%r65, %r115, %r64;
	mul.wide.u32 	%rd14, %r65, 4;
	add.s64 	%rd15, %rd5, %rd14;
	ld.global.nc.f32 	%f12, [%rd15];
	cvt.rzi.ftz.u32.f32 	%r11, %f12;
	add.s64 	%rd16, %rd4, %rd14;
	ld.global.nc.f32 	%f13, [%rd16];
	cvt.rzi.ftz.u32.f32 	%r12, %f13;
	mul.lo.s32 	%r66, %r13, %r5;
	cvt.u64.u32 	%rd17, %r66;
	mul.lo.s32 	%r67, %r5, %r10;
	cvt.u64.u32 	%rd18, %r67;
	add.s64 	%rd6, %rd17, %rd18;
	mov.u32 	%r127, -1;
	mov.f32 	%f33, %f11;
	@%p3 bra 	$L__BB52_14;

	add.s32 	%r14, %r12, 3;
	mov.u32 	%r116, 0;
	mov.u32 	%r128, %r116;
	mov.f32 	%f33, %f11;

$L__BB52_5:
	mov.u32 	%r124, 0;
	ld.param.u32 	%r112, [TensorMaxPool_param_7];
	add.s32 	%r73, %r116, %r11;
	mul.lo.s32 	%r18, %r73, %r112;
	@%p4 bra 	$L__BB52_9;

	mov.u32 	%r124, 0;
	add.s32 	%r119, %r14, %r18;

$L__BB52_7:
	add.s32 	%r75, %r119, -3;
	cvt.u64.u32 	%rd19, %r75;
	add.s64 	%rd20, %rd6, %rd19;
	shl.b64 	%rd21, %rd20, 2;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.nc.f32 	%f16, [%rd22];
	setp.gt.ftz.f32 	%p5, %f16, %f33;
	setp.lt.s32 	%p6, %r127, 0;
	or.pred  	%p7, %p6, %p5;
	selp.f32 	%f17, %f16, %f33, %p7;
	add.s32 	%r76, %r128, %r124;
	selp.b32 	%r77, %r76, %r127, %p7;
	add.s32 	%r78, %r119, -2;
	cvt.u64.u32 	%rd23, %r78;
	add.s64 	%rd24, %rd6, %rd23;
	shl.b64 	%rd25, %rd24, 2;
	add.s64 	%rd26, %rd1, %rd25;
	setp.lt.s32 	%p8, %r77, 0;
	ld.global.nc.f32 	%f18, [%rd26];
	setp.gt.ftz.f32 	%p9, %f18, %f17;
	or.pred  	%p10, %p8, %p9;
	selp.f32 	%f19, %f18, %f17, %p10;
	add.s32 	%r79, %r76, 1;
	selp.b32 	%r80, %r79, %r77, %p10;
	add.s32 	%r81, %r119, -1;
	cvt.u64.u32 	%rd27, %r81;
	add.s64 	%rd28, %rd6, %rd27;
	shl.b64 	%rd29, %rd28, 2;
	add.s64 	%rd30, %rd1, %rd29;
	setp.lt.s32 	%p11, %r80, 0;
	ld.global.nc.f32 	%f20, [%rd30];
	setp.gt.ftz.f32 	%p12, %f20, %f19;
	or.pred  	%p13, %p11, %p12;
	selp.f32 	%f21, %f20, %f19, %p13;
	add.s32 	%r82, %r76, 2;
	selp.b32 	%r83, %r82, %r80, %p13;
	cvt.u64.u32 	%rd31, %r119;
	add.s64 	%rd32, %rd6, %rd31;
	shl.b64 	%rd33, %rd32, 2;
	add.s64 	%rd34, %rd1, %rd33;
	setp.lt.s32 	%p14, %r83, 0;
	ld.global.nc.f32 	%f22, [%rd34];
	setp.gt.ftz.f32 	%p15, %f22, %f21;
	or.pred  	%p16, %p14, %p15;
	selp.f32 	%f33, %f22, %f21, %p16;
	add.s32 	%r84, %r76, 3;
	selp.b32 	%r127, %r84, %r83, %p16;
	add.s32 	%r119, %r119, 4;
	add.s32 	%r124, %r124, 4;
	add.s32 	%r85, %r8, %r124;
	setp.ne.s32 	%p17, %r85, 0;
	@%p17 bra 	$L__BB52_7;

	add.s32 	%r128, %r128, %r124;

$L__BB52_9:
	mov.u32 	%r30, %r128;
	@%p18 bra 	$L__BB52_13;

	setp.eq.s32 	%p19, %r7, 1;
	add.s32 	%r86, %r18, %r12;
	add.s32 	%r32, %r86, %r124;
	cvt.u64.u32 	%rd35, %r32;
	add.s64 	%rd36, %rd6, %rd35;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.f32 	%f23, [%rd38];
	setp.gt.ftz.f32 	%p20, %f23, %f33;
	setp.lt.s32 	%p21, %r127, 0;
	or.pred  	%p22, %p21, %p20;
	selp.f32 	%f33, %f23, %f33, %p22;
	selp.b32 	%r127, %r30, %r127, %p22;
	add.s32 	%r128, %r30, 1;
	@%p19 bra 	$L__BB52_13;

	setp.eq.s32 	%p23, %r7, 2;
	add.s32 	%r87, %r32, 1;
	cvt.u64.u32 	%rd39, %r87;
	add.s64 	%rd40, %rd6, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.f32 	%f24, [%rd42];
	setp.gt.ftz.f32 	%p24, %f24, %f33;
	setp.lt.s32 	%p25, %r127, 0;
	or.pred  	%p26, %p25, %p24;
	selp.f32 	%f33, %f24, %f33, %p26;
	selp.b32 	%r127, %r128, %r127, %p26;
	add.s32 	%r128, %r30, 2;
	@%p23 bra 	$L__BB52_13;

	add.s32 	%r88, %r32, 2;
	cvt.u64.u32 	%rd43, %r88;
	add.s64 	%rd44, %rd6, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.nc.f32 	%f25, [%rd46];
	setp.gt.ftz.f32 	%p27, %f25, %f33;
	setp.lt.s32 	%p28, %r127, 0;
	or.pred  	%p29, %p28, %p27;
	selp.f32 	%f33, %f25, %f33, %p29;
	selp.b32 	%r127, %r128, %r127, %p29;
	add.s32 	%r128, %r30, 3;

$L__BB52_13:
	ld.param.u32 	%r105, [TensorMaxPool_param_13];
	add.s32 	%r116, %r116, 1;
	setp.lt.u32 	%p30, %r116, %r105;
	@%p30 bra 	$L__BB52_5;

$L__BB52_14:
	ld.param.u32 	%r108, [TensorMaxPool_param_16];
	ld.param.u32 	%r107, [TensorMaxPool_param_15];
	ld.param.u32 	%r106, [TensorMaxPool_param_11];
	div.u32 	%r89, %r11, %r107;
	div.u32 	%r90, %r12, %r108;
	mad.lo.s32 	%r91, %r89, %r106, %r90;
	cvt.u64.u32 	%rd47, %r91;
	add.s32 	%r92, %r13, %r10;
	mul.lo.s32 	%r93, %r3, %r92;
	cvt.u64.u32 	%rd48, %r93;
	add.s64 	%rd7, %rd47, %rd48;
	@%p31 bra 	$L__BB52_16;

	cvt.rn.f32.s32 	%f26, %r127;
	shl.b64 	%rd49, %rd7, 2;
	add.s64 	%rd50, %rd3, %rd49;
	st.global.f32 	[%rd50], %f26;

$L__BB52_16:
	ld.param.u32 	%r109, [TensorMaxPool_param_0];
	shl.b64 	%rd51, %rd7, 2;
	add.s64 	%rd52, %rd2, %rd51;
	st.global.f32 	[%rd52], %f33;
	add.s32 	%r115, %r115, %r4;
	setp.lt.u32 	%p32, %r115, %r109;
	@%p32 bra 	$L__BB52_3;
	bra.uni 	$L__BB52_21;

$L__BB52_17:
	setp.eq.s32 	%p33, %r57, 0;

$L__BB52_18:
	div.u32 	%r94, %r115, %r47;
	mul.lo.s32 	%r95, %r94, %r47;
	sub.s32 	%r96, %r115, %r95;
	mul.wide.u32 	%rd53, %r96, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.nc.f32 	%f27, [%rd54];
	cvt.rzi.ftz.u32.f32 	%r97, %f27;
	add.s64 	%rd55, %rd4, %rd53;
	ld.global.nc.f32 	%f28, [%rd55];
	cvt.rzi.ftz.u32.f32 	%r98, %f28;
	div.u32 	%r99, %r97, %r55;
	div.u32 	%r100, %r98, %r56;
	mul.lo.s32 	%r101, %r3, %r94;
	cvt.u64.u32 	%rd56, %r101;
	mad.lo.s32 	%r102, %r99, %r51, %r100;
	cvt.u64.u32 	%rd57, %r102;
	add.s64 	%rd8, %rd57, %rd56;
	@%p33 bra 	$L__BB52_20;

	shl.b64 	%rd58, %rd8, 2;
	add.s64 	%rd59, %rd3, %rd58;
	mov.u32 	%r103, -1082130432;
	st.global.u32 	[%rd59], %r103;

$L__BB52_20:
	shl.b64 	%rd60, %rd8, 2;
	add.s64 	%rd61, %rd2, %rd60;
	mov.u32 	%r104, 0;
	st.global.u32 	[%rd61], %r104;
	add.s32 	%r115, %r115, %r4;
	setp.lt.u32 	%p34, %r115, %r46;
	@%p34 bra 	$L__BB52_18;

$L__BB52_21:
	ret;

}
	// .globl	TensorReverseMaxPool
.visible .entry TensorReverseMaxPool(
	.param .u32 TensorReverseMaxPool_param_0,
	.param .u64 TensorReverseMaxPool_param_1,
	.param .u64 TensorReverseMaxPool_param_2,
	.param .u64 TensorReverseMaxPool_param_3,
	.param .u32 TensorReverseMaxPool_param_4,
	.param .u32 TensorReverseMaxPool_param_5,
	.param .u32 TensorReverseMaxPool_param_6,
	.param .u32 TensorReverseMaxPool_param_7,
	.param .u32 TensorReverseMaxPool_param_8,
	.param .u32 TensorReverseMaxPool_param_9,
	.param .u32 TensorReverseMaxPool_param_10,
	.param .u32 TensorReverseMaxPool_param_11,
	.param .u32 TensorReverseMaxPool_param_12,
	.param .u32 TensorReverseMaxPool_param_13
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<20>;


	ld.param.u32 	%r9, [TensorReverseMaxPool_param_0];
	ld.param.u64 	%rd4, [TensorReverseMaxPool_param_1];
	ld.param.u64 	%rd5, [TensorReverseMaxPool_param_2];
	ld.param.u64 	%rd6, [TensorReverseMaxPool_param_3];
	ld.param.u32 	%r10, [TensorReverseMaxPool_param_4];
	ld.param.u32 	%r11, [TensorReverseMaxPool_param_5];
	ld.param.u32 	%r12, [TensorReverseMaxPool_param_6];
	ld.param.u32 	%r13, [TensorReverseMaxPool_param_8];
	ld.param.u32 	%r14, [TensorReverseMaxPool_param_9];
	ld.param.u32 	%r15, [TensorReverseMaxPool_param_11];
	ld.param.u32 	%r16, [TensorReverseMaxPool_param_12];
	ld.param.u32 	%r17, [TensorReverseMaxPool_param_13];
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r44, %r1, %r18, %r19;
	setp.ge.u32 	%p1, %r44, %r9;
	@%p1 bra 	$L__BB53_3;

	mul.lo.s32 	%r3, %r11, %r10;
	mul.lo.s32 	%r20, %r13, %r12;
	mul.lo.s32 	%r4, %r20, %r14;
	mul.lo.s32 	%r5, %r14, %r13;
	mov.u32 	%r21, %nctaid.x;
	mul.lo.s32 	%r6, %r1, %r21;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

$L__BB53_2:
	div.u32 	%r22, %r44, %r10;
	div.u32 	%r23, %r22, %r11;
	mul.lo.s32 	%r24, %r23, %r11;
	sub.s32 	%r25, %r22, %r24;
	div.u32 	%r26, %r23, %r12;
	mul.lo.s32 	%r27, %r26, %r12;
	sub.s32 	%r28, %r23, %r27;
	mad.lo.s32 	%r29, %r26, %r12, %r28;
	mul.lo.s32 	%r30, %r3, %r29;
	cvt.u64.u32 	%rd7, %r30;
	mul.lo.s32 	%r31, %r4, %r26;
	cvt.u64.u32 	%rd8, %r31;
	mul.lo.s32 	%r32, %r5, %r28;
	cvt.u64.u32 	%rd9, %r32;
	add.s64 	%rd10, %rd8, %rd9;
	mul.lo.s32 	%r33, %r22, %r10;
	sub.s32 	%r34, %r44, %r33;
	mad.lo.s32 	%r35, %r25, %r10, %r34;
	cvt.u64.u32 	%rd11, %r35;
	add.s64 	%rd12, %rd7, %rd11;
	shl.b64 	%rd13, %rd12, 2;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.f32 	%f1, [%rd14];
	add.s64 	%rd15, %rd2, %rd13;
	ld.global.nc.f32 	%f2, [%rd15];
	cvt.rzi.ftz.s32.f32 	%r36, %f2;
	max.s32 	%r37, %r36, 0;
	div.u32 	%r38, %r37, %r15;
	mad.lo.s32 	%r39, %r25, %r16, %r38;
	mul.lo.s32 	%r40, %r38, %r15;
	sub.s32 	%r41, %r37, %r40;
	mad.lo.s32 	%r42, %r34, %r17, %r41;
	mad.lo.s32 	%r43, %r39, %r13, %r42;
	cvt.u64.u32 	%rd16, %r43;
	add.s64 	%rd17, %rd10, %rd16;
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd3, %rd18;
	st.global.f32 	[%rd19], %f1;
	add.s32 	%r44, %r44, %r6;
	setp.lt.u32 	%p2, %r44, %r9;
	@%p2 bra 	$L__BB53_2;

$L__BB53_3:
	ret;

}
	// .globl	CalculateDistances
.visible .entry CalculateDistances(
	.param .u64 CalculateDistances_param_0,
	.param .u64 CalculateDistances_param_1,
	.param .u64 CalculateDistances_param_2,
	.param .u32 CalculateDistances_param_3,
	.param .u32 CalculateDistances_param_4,
	.param .u32 CalculateDistances_param_5,
	.param .u32 CalculateDistances_param_6
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<46>;


	ld.param.u64 	%rd5, [CalculateDistances_param_0];
	ld.param.u64 	%rd6, [CalculateDistances_param_1];
	ld.param.u64 	%rd7, [CalculateDistances_param_2];
	ld.param.u32 	%r27, [CalculateDistances_param_3];
	ld.param.u32 	%r28, [CalculateDistances_param_4];
	ld.param.u32 	%r29, [CalculateDistances_param_5];
	ld.param.u32 	%r30, [CalculateDistances_param_6];
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd5;
	mov.u32 	%r31, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r32, %tid.x;
	mad.lo.s32 	%r45, %r1, %r31, %r32;
	setp.ge.u32 	%p1, %r45, %r29;
	@%p1 bra 	$L__BB54_21;

	mov.u32 	%r33, %ntid.y;
	mov.u32 	%r34, %ctaid.y;
	mov.u32 	%r35, %tid.y;
	mad.lo.s32 	%r3, %r33, %r34, %r35;
	mov.u32 	%r36, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r36;
	mov.u32 	%r37, %ctaid.z;
	mov.u32 	%r38, %ntid.z;
	mov.u32 	%r39, %tid.z;
	mad.lo.s32 	%r5, %r38, %r37, %r39;
	mov.u32 	%r40, %nctaid.y;
	mul.lo.s32 	%r6, %r33, %r40;
	mov.u32 	%r41, %nctaid.z;
	mul.lo.s32 	%r7, %r38, %r41;
	setp.ge.u32 	%p2, %r3, %r28;
	setp.eq.s32 	%p3, %r30, 0;
	setp.ge.u32 	%p11, %r5, %r27;
	setp.eq.s32 	%p5, %r30, 1;

$L__BB54_2:
	@%p2 bra 	$L__BB54_20;

	cvt.u64.u32 	%rd4, %r45;
	@%p3 bra 	$L__BB54_15;

	mov.u32 	%r46, %r3;

$L__BB54_5:
	@%p11 bra 	$L__BB54_14;

	mul.wide.u32 	%rd8, %r46, 8;
	add.s64 	%rd9, %rd3, %rd8;
	ld.global.nc.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	mul.lo.s32 	%r10, %r46, %r27;
	@%p5 bra 	$L__BB54_10;

	setp.ne.s32 	%p6, %r30, 2;
	@%p6 bra 	$L__BB54_12;

	add.s32 	%r47, %r5, %r10;
	mov.u32 	%r48, %r5;

$L__BB54_9:
	mul.wide.u32 	%rd14, %r48, 8;
	add.s64 	%rd15, %rd2, %rd14;
	ld.global.nc.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd19, %rd17, %rd12;
	ld.global.f32 	%f3, [%rd19];
	sub.ftz.f32 	%f4, %f1, %f3;
	abs.ftz.f32 	%f5, %f4;
	mul.wide.u32 	%rd20, %r47, 4;
	add.s64 	%rd21, %rd1, %rd20;
	atom.global.add.f32 	%f6, [%rd21], %f5;
	add.s32 	%r47, %r47, %r7;
	add.s32 	%r48, %r48, %r7;
	setp.lt.u32 	%p7, %r48, %r27;
	@%p7 bra 	$L__BB54_9;
	bra.uni 	$L__BB54_14;

$L__BB54_10:
	mov.u32 	%r49, %r5;

$L__BB54_11:
	mul.wide.u32 	%rd22, %r49, 8;
	add.s64 	%rd23, %rd2, %rd22;
	ld.global.nc.u64 	%rd24, [%rd23];
	cvta.to.global.u64 	%rd25, %rd24;
	add.s64 	%rd27, %rd25, %rd12;
	ld.global.f32 	%f7, [%rd27];
	mul.ftz.f32 	%f8, %f1, %f7;
	add.s32 	%r42, %r49, %r10;
	mul.wide.u32 	%rd28, %r42, 4;
	add.s64 	%rd29, %rd1, %rd28;
	atom.global.add.f32 	%f9, [%rd29], %f8;
	add.s32 	%r49, %r49, %r7;
	setp.lt.u32 	%p8, %r49, %r27;
	@%p8 bra 	$L__BB54_11;
	bra.uni 	$L__BB54_14;

$L__BB54_12:
	mov.u32 	%r50, %r5;

$L__BB54_13:
	add.s32 	%r43, %r50, %r10;
	mul.wide.u32 	%rd30, %r43, 4;
	add.s64 	%rd31, %rd1, %rd30;
	atom.global.add.f32 	%f10, [%rd31], 0f00000000;
	add.s32 	%r50, %r50, %r7;
	setp.lt.u32 	%p9, %r50, %r27;
	@%p9 bra 	$L__BB54_13;

$L__BB54_14:
	add.s32 	%r46, %r46, %r6;
	setp.lt.u32 	%p10, %r46, %r28;
	@%p10 bra 	$L__BB54_5;
	bra.uni 	$L__BB54_20;

$L__BB54_15:
	mov.u32 	%r51, %r3;

$L__BB54_16:
	@%p11 bra 	$L__BB54_19;

	mul.wide.u32 	%rd32, %r51, 8;
	add.s64 	%rd33, %rd3, %rd32;
	ld.global.nc.u64 	%rd34, [%rd33];
	cvta.to.global.u64 	%rd35, %rd34;
	shl.b64 	%rd36, %rd4, 2;
	add.s64 	%rd37, %rd35, %rd36;
	ld.global.f32 	%f2, [%rd37];
	mul.lo.s32 	%r22, %r51, %r27;
	mov.u32 	%r52, %r5;

$L__BB54_18:
	mul.wide.u32 	%rd38, %r52, 8;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.nc.u64 	%rd40, [%rd39];
	cvta.to.global.u64 	%rd41, %rd40;
	add.s64 	%rd43, %rd41, %rd36;
	ld.global.f32 	%f11, [%rd43];
	sub.ftz.f32 	%f12, %f2, %f11;
	mul.ftz.f32 	%f13, %f12, %f12;
	add.s32 	%r44, %r52, %r22;
	mul.wide.u32 	%rd44, %r44, 4;
	add.s64 	%rd45, %rd1, %rd44;
	atom.global.add.f32 	%f14, [%rd45], %f13;
	add.s32 	%r52, %r52, %r7;
	setp.lt.u32 	%p12, %r52, %r27;
	@%p12 bra 	$L__BB54_18;

$L__BB54_19:
	add.s32 	%r51, %r51, %r6;
	setp.lt.u32 	%p13, %r51, %r28;
	@%p13 bra 	$L__BB54_16;

$L__BB54_20:
	add.s32 	%r45, %r45, %r4;
	setp.lt.u32 	%p14, %r45, %r29;
	@%p14 bra 	$L__BB54_2;

$L__BB54_21:
	ret;

}
	// .globl	MultiCosineDistance
.visible .entry MultiCosineDistance(
	.param .u64 MultiCosineDistance_param_0,
	.param .u64 MultiCosineDistance_param_1,
	.param .u64 MultiCosineDistance_param_2,
	.param .u64 MultiCosineDistance_param_3,
	.param .u64 MultiCosineDistance_param_4,
	.param .u32 MultiCosineDistance_param_5,
	.param .u32 MultiCosineDistance_param_6,
	.param .u32 MultiCosineDistance_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<35>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd7, [MultiCosineDistance_param_0];
	ld.param.u64 	%rd8, [MultiCosineDistance_param_1];
	ld.param.u64 	%rd9, [MultiCosineDistance_param_2];
	ld.param.u64 	%rd10, [MultiCosineDistance_param_3];
	ld.param.u64 	%rd11, [MultiCosineDistance_param_4];
	ld.param.u32 	%r17, [MultiCosineDistance_param_5];
	ld.param.u32 	%r18, [MultiCosineDistance_param_6];
	ld.param.u32 	%r19, [MultiCosineDistance_param_7];
	mov.u32 	%r20, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r21, %tid.x;
	mad.lo.s32 	%r31, %r1, %r20, %r21;
	setp.ge.u32 	%p1, %r31, %r19;
	@%p1 bra 	$L__BB55_9;

	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %ctaid.y;
	mov.u32 	%r24, %tid.y;
	mad.lo.s32 	%r3, %r22, %r23, %r24;
	mov.u32 	%r25, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r25;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r27, %ntid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r5, %r27, %r26, %r28;
	mov.u32 	%r29, %nctaid.y;
	mul.lo.s32 	%r6, %r22, %r29;
	mov.u32 	%r30, %nctaid.z;
	mul.lo.s32 	%r7, %r27, %r30;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd9;
	cvta.to.global.u64 	%rd4, %rd10;
	cvta.to.global.u64 	%rd5, %rd11;
	setp.ge.u32 	%p2, %r3, %r18;
	setp.ge.u32 	%p3, %r5, %r17;

$L__BB55_2:
	@%p2 bra 	$L__BB55_8;

	cvt.u64.u32 	%rd6, %r31;
	mov.u32 	%r32, %r3;

$L__BB55_4:
	@%p3 bra 	$L__BB55_7;

	mul.wide.u32 	%rd12, %r32, 8;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.u64 	%rd14, [%rd13];
	cvta.to.global.u64 	%rd15, %rd14;
	shl.b64 	%rd16, %rd6, 2;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.f32 	%f1, [%rd17];
	mul.ftz.f32 	%f2, %f1, %f1;
	mad.lo.s32 	%r33, %r32, %r17, %r5;
	mov.u32 	%r34, %r5;

$L__BB55_6:
	mul.wide.u32 	%rd18, %r34, 8;
	add.s64 	%rd19, %rd2, %rd18;
	ld.global.nc.u64 	%rd20, [%rd19];
	cvta.to.global.u64 	%rd21, %rd20;
	add.s64 	%rd23, %rd21, %rd16;
	ld.global.f32 	%f3, [%rd23];
	mul.wide.u32 	%rd24, %r33, 4;
	add.s64 	%rd25, %rd3, %rd24;
	atom.global.add.f32 	%f4, [%rd25], %f2;
	add.s64 	%rd26, %rd4, %rd24;
	mul.ftz.f32 	%f5, %f1, %f3;
	atom.global.add.f32 	%f6, [%rd26], %f5;
	add.s64 	%rd27, %rd5, %rd24;
	mul.ftz.f32 	%f7, %f3, %f3;
	atom.global.add.f32 	%f8, [%rd27], %f7;
	add.s32 	%r33, %r33, %r7;
	add.s32 	%r34, %r34, %r7;
	setp.lt.u32 	%p4, %r34, %r17;
	@%p4 bra 	$L__BB55_6;

$L__BB55_7:
	add.s32 	%r32, %r32, %r6;
	setp.lt.u32 	%p5, %r32, %r18;
	@%p5 bra 	$L__BB55_4;

$L__BB55_8:
	add.s32 	%r31, %r31, %r4;
	setp.lt.u32 	%p6, %r31, %r19;
	@%p6 bra 	$L__BB55_2;

$L__BB55_9:
	ret;

}
	// .globl	SumValues
.visible .entry SumValues(
	.param .u64 SumValues_param_0,
	.param .u32 SumValues_param_1,
	.param .u64 SumValues_param_2,
	.param .u32 SumValues_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<26>;
	.reg .b32 	%r<48>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ9SumValuesE5block[4096];

	ld.param.u64 	%rd1, [SumValues_param_0];
	ld.param.u32 	%r20, [SumValues_param_1];
	ld.param.u64 	%rd2, [SumValues_param_2];
	ld.param.u32 	%r21, [SumValues_param_3];
	mov.u32 	%r22, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r22, %r1, %r2;
	setp.ge.u32 	%p1, %r3, %r20;
	@%p1 bra 	$L__BB56_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r23, %r3, %r21;
	mul.wide.u32 	%rd4, %r23, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f8, [%rd5];
	shl.b32 	%r24, %r2, 2;
	mov.u32 	%r25, _ZZ9SumValuesE5block;
	add.s32 	%r26, %r25, %r24;
	st.shared.f32 	[%r26], %f8;

$L__BB56_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r2, 0;
	@%p2 bra 	$L__BB56_11;

	shl.b32 	%r4, %r1, 10;
	sub.s32 	%r27, %r20, %r4;
	min.u32 	%r5, %r27, 1024;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f25, 0f00000000;
	@%p3 bra 	$L__BB56_10;

	not.b32 	%r29, %r20;
	add.s32 	%r30, %r4, %r29;
	max.u32 	%r31, %r30, -1025;
	mov.u32 	%r32, -2;
	sub.s32 	%r33, %r32, %r31;
	and.b32  	%r47, %r5, 3;
	setp.lt.u32 	%p4, %r33, 3;
	mov.f32 	%f25, 0f00000000;
	mov.u32 	%r45, 0;
	@%p4 bra 	$L__BB56_7;

	add.s32 	%r36, %r4, -1;
	sub.s32 	%r37, %r36, %r20;
	max.u32 	%r38, %r37, -1025;
	add.s32 	%r39, %r38, %r47;
	neg.s32 	%r42, %r39;
	mov.u32 	%r43, _ZZ9SumValuesE5block;

$L__BB56_6:
	ld.shared.f32 	%f13, [%r43];
	add.ftz.f32 	%f14, %f25, %f13;
	ld.shared.f32 	%f15, [%r43+4];
	add.ftz.f32 	%f16, %f14, %f15;
	ld.shared.f32 	%f17, [%r43+8];
	add.ftz.f32 	%f18, %f16, %f17;
	ld.shared.f32 	%f19, [%r43+12];
	add.ftz.f32 	%f25, %f18, %f19;
	add.s32 	%r45, %r45, 4;
	add.s32 	%r43, %r43, 16;
	add.s32 	%r42, %r42, -4;
	setp.ne.s32 	%p5, %r42, 1;
	@%p5 bra 	$L__BB56_6;

$L__BB56_7:
	setp.eq.s32 	%p6, %r47, 0;
	@%p6 bra 	$L__BB56_10;

	shl.b32 	%r40, %r45, 2;
	mov.u32 	%r41, _ZZ9SumValuesE5block;
	add.s32 	%r46, %r41, %r40;

$L__BB56_9:
	.pragma "nounroll";
	ld.shared.f32 	%f20, [%r46];
	add.ftz.f32 	%f25, %f25, %f20;
	add.s32 	%r46, %r46, 4;
	add.s32 	%r47, %r47, -1;
	setp.ne.s32 	%p7, %r47, 0;
	@%p7 bra 	$L__BB56_9;

$L__BB56_10:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f25;

$L__BB56_11:
	ret;

}

