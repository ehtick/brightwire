//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29373293
// Cuda compilation tools, release 11.2, V11.2.67
// Based on NVVM 7.0.1
//

.version 7.2
.target sm_61
.address_size 64

	// .globl	IsFinite
// _ZZ13FindMinAndMaxE5block has been demoted
// _ZZ7FindSumE5block has been demoted
// _ZZ10FindStdDevE5block has been demoted

.visible .entry IsFinite(
	.param .u64 IsFinite_param_0,
	.param .u64 IsFinite_param_1,
	.param .u32 IsFinite_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [IsFinite_param_0];
	ld.param.u64 	%rd4, [IsFinite_param_1];
	ld.param.u32 	%r6, [IsFinite_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB0_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB0_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.geu.ftz.f32 	%p2, %f2, 0f7F800000;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB0_2;

LBB0_3:
	ret;

}
	// .globl	PointwiseMultiply
.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd4, [PointwiseMultiply_param_1];
	ld.param.u32 	%r6, [PointwiseMultiply_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB1_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB1_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	add.s64 	%rd7, %rd2, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.nc.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB1_2;

LBB1_3:
	ret;

}
	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [PointwiseDivide_param_0];
	ld.param.u64 	%rd4, [PointwiseDivide_param_1];
	ld.param.u32 	%r6, [PointwiseDivide_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB2_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB2_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	add.s64 	%rd7, %rd2, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.nc.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB2_2;

LBB2_3:
	ret;

}
	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Sqrt_param_0];
	ld.param.u64 	%rd4, [Sqrt_param_1];
	ld.param.u32 	%r6, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB3_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB3_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f4;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB3_2;

LBB3_3:
	ret;

}
	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [AddInPlace_param_0];
	ld.param.u64 	%rd4, [AddInPlace_param_1];
	ld.param.u32 	%r6, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB4_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB4_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f3, [%rd6];
	add.s64 	%rd7, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd7];
	mul.ftz.f32 	%f5, %f4, %f2;
	fma.rn.ftz.f32 	%f6, %f3, %f1, %f5;
	st.global.f32 	[%rd6], %f6;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB4_2;

LBB4_3:
	ret;

}
	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SubtractInPlace_param_0];
	ld.param.u64 	%rd4, [SubtractInPlace_param_1];
	ld.param.u32 	%r6, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB5_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB5_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f3, [%rd6];
	mul.ftz.f32 	%f4, %f3, %f1;
	add.s64 	%rd7, %rd2, %rd5;
	ld.global.nc.f32 	%f5, [%rd7];
	mul.ftz.f32 	%f6, %f5, %f2;
	sub.ftz.f32 	%f7, %f4, %f6;
	st.global.f32 	[%rd6], %f7;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB5_2;

LBB5_3:
	ret;

}
	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachRow_param_0];
	ld.param.u64 	%rd4, [AddToEachRow_param_1];
	ld.param.u32 	%r10, [AddToEachRow_param_2];
	ld.param.u32 	%r11, [AddToEachRow_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB6_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r11;

LBB6_2:
	@%p2 bra 	LBB6_5;

	mov.u32 	%r21, %r3;

LBB6_4:
	mul.wide.u32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB6_4;

LBB6_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB6_2;

LBB6_6:
	ret;

}
	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachColumn_param_0];
	ld.param.u64 	%rd4, [AddToEachColumn_param_1];
	ld.param.u32 	%r10, [AddToEachColumn_param_2];
	ld.param.u32 	%r11, [AddToEachColumn_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB7_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r11;

LBB7_2:
	@%p2 bra 	LBB7_5;

	mul.wide.u32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

LBB7_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f2, [%rd8];
	add.ftz.f32 	%f3, %f1, %f2;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB7_4;

LBB7_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB7_2;

LBB7_6:
	ret;

}
	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [TanH_param_0];
	ld.param.u64 	%rd5, [TanH_param_1];
	ld.param.u32 	%r6, [TanH_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r15, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r15, %r6;
	@%p1 bra 	LBB8_6;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.f32 	%f15, 0fBD563CAE;
	mov.f32 	%f16, 0f3C80F082;

LBB8_2:
	cvt.u64.u32 	%rd3, %r15;
	mul.wide.u32 	%rd6, %r15, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32 	%p2, %f2, 0f3F19999A;
	@%p2 bra 	LBB8_4;
	bra.uni 	LBB8_3;

LBB8_4:
	mul.ftz.f32 	%f14, %f1, %f1;
	fma.rn.ftz.f32 	%f17, %f16, %f14, %f15;
	mov.f32 	%f18, 0f3E085941;
	fma.rn.ftz.f32 	%f19, %f17, %f14, %f18;
	mov.f32 	%f20, 0fBEAAA9ED;
	fma.rn.ftz.f32 	%f21, %f19, %f14, %f20;
	mov.f32 	%f22, 0f00000000;
	fma.rn.ftz.f32 	%f23, %f21, %f14, %f22;
	fma.rn.ftz.f32 	%f24, %f23, %f1, %f1;
	bra.uni 	LBB8_5;

LBB8_3:
	mul.ftz.f32 	%f6, %f2, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f7, %f6;
	add.ftz.f32 	%f8, %f7, 0f3F800000;
	mov.f32 	%f9, 0f3F800000;
	rcp.approx.ftz.f32 	%f10, %f8;
	mov.f32 	%f11, 0fC0000000;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f9;
	setp.ge.ftz.f32 	%p3, %f2, 0f41102CB4;
	selp.f32 	%f13, 0f3F800000, %f12, %p3;
	mov.b32 	%r10, %f13;
	mov.b32 	%r11, %f1;
	and.b32  	%r12, %r11, -2147483648;
	or.b32  	%r13, %r12, %r10;
	mov.b32 	%f24, %r13;

LBB8_5:
	shl.b64 	%rd8, %rd3, 2;
	add.s64 	%rd9, %rd2, %rd8;
	st.global.f32 	[%rd9], %f24;
	cvt.u32.u64 	%r14, %rd3;
	add.s32 	%r15, %r14, %r3;
	setp.lt.u32 	%p4, %r15, %r6;
	@%p4 bra 	LBB8_2;

LBB8_6:
	ret;

}
	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<28>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [TanHDerivative_param_0];
	ld.param.u64 	%rd5, [TanHDerivative_param_1];
	ld.param.u32 	%r6, [TanHDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r15, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r15, %r6;
	@%p1 bra 	LBB9_6;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.f32 	%f15, 0fBD563CAE;
	mov.f32 	%f16, 0f3C80F082;

LBB9_2:
	cvt.u64.u32 	%rd3, %r15;
	mul.wide.u32 	%rd6, %r15, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32 	%p2, %f2, 0f3F19999A;
	@%p2 bra 	LBB9_4;
	bra.uni 	LBB9_3;

LBB9_4:
	mul.ftz.f32 	%f14, %f1, %f1;
	fma.rn.ftz.f32 	%f17, %f16, %f14, %f15;
	mov.f32 	%f18, 0f3E085941;
	fma.rn.ftz.f32 	%f19, %f17, %f14, %f18;
	mov.f32 	%f20, 0fBEAAA9ED;
	fma.rn.ftz.f32 	%f21, %f19, %f14, %f20;
	mov.f32 	%f22, 0f00000000;
	fma.rn.ftz.f32 	%f23, %f21, %f14, %f22;
	fma.rn.ftz.f32 	%f27, %f23, %f1, %f1;
	bra.uni 	LBB9_5;

LBB9_3:
	mul.ftz.f32 	%f6, %f2, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f7, %f6;
	add.ftz.f32 	%f8, %f7, 0f3F800000;
	mov.f32 	%f9, 0f3F800000;
	rcp.approx.ftz.f32 	%f10, %f8;
	mov.f32 	%f11, 0fC0000000;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f9;
	setp.ge.ftz.f32 	%p3, %f2, 0f41102CB4;
	selp.f32 	%f13, 0f3F800000, %f12, %p3;
	mov.b32 	%r10, %f13;
	mov.b32 	%r11, %f1;
	and.b32  	%r12, %r11, -2147483648;
	or.b32  	%r13, %r12, %r10;
	mov.b32 	%f27, %r13;

LBB9_5:
	mul.ftz.f32 	%f24, %f27, %f27;
	mov.f32 	%f25, 0f3F800000;
	sub.ftz.f32 	%f26, %f25, %f24;
	shl.b64 	%rd8, %rd3, 2;
	add.s64 	%rd9, %rd2, %rd8;
	st.global.f32 	[%rd9], %f26;
	cvt.u32.u64 	%r14, %rd3;
	add.s32 	%r15, %r14, %r3;
	setp.lt.u32 	%p4, %r15, %r6;
	@%p4 bra 	LBB9_2;

LBB9_6:
	ret;

}
	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Sigmoid_param_0];
	ld.param.u64 	%rd4, [Sigmoid_param_1];
	ld.param.u32 	%r6, [Sigmoid_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB10_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB10_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB10_2;

LBB10_3:
	ret;

}
	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd4, [SigmoidDerivative_param_1];
	ld.param.u32 	%r6, [SigmoidDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB11_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f5, 0f3F800000;

LBB11_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f6, %f4;
	sub.ftz.f32 	%f7, %f5, %f6;
	mul.ftz.f32 	%f8, %f6, %f7;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f8;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB11_2;

LBB11_3:
	ret;

}
	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [RELU_param_0];
	ld.param.u64 	%rd4, [RELU_param_1];
	ld.param.u32 	%r6, [RELU_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB12_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB12_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f00000000, %f1, %p2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB12_2;

LBB12_3:
	ret;

}
	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [RELUDerivative_param_0];
	ld.param.u64 	%rd4, [RELUDerivative_param_1];
	ld.param.u32 	%r6, [RELUDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB13_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB13_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f3F800000, 0f00000000, %p2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB13_2;

LBB13_3:
	ret;

}
	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [LeakyRELU_param_0];
	ld.param.u64 	%rd4, [LeakyRELU_param_1];
	ld.param.u32 	%r6, [LeakyRELU_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB14_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB14_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	mul.ftz.f32 	%f2, %f1, 0f3C23D70A;
	selp.f32 	%f3, %f2, %f1, %p2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB14_2;

LBB14_3:
	ret;

}
	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd4, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r6, [LeakyRELUDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB15_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB15_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.le.ftz.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f3C23D70A, 0f3F800000, %p2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB15_2;

LBB15_3:
	ret;

}
	// .globl	Reverse
.visible .entry Reverse(
	.param .u64 Reverse_param_0,
	.param .u64 Reverse_param_1,
	.param .u32 Reverse_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Reverse_param_0];
	ld.param.u64 	%rd4, [Reverse_param_1];
	ld.param.u32 	%r6, [Reverse_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r12, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r12, %r6;
	@%p1 bra 	LBB16_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB16_2:
	mul.wide.u32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	not.b32 	%r10, %r12;
	add.s32 	%r11, %r10, %r6;
	mul.wide.u32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p2, %r12, %r6;
	@%p2 bra 	LBB16_2;

LBB16_3:
	ret;

}
	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd4, [SumRows_param_0];
	ld.param.u64 	%rd5, [SumRows_param_1];
	ld.param.u32 	%r10, [SumRows_param_2];
	ld.param.u32 	%r11, [SumRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB17_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

LBB17_2:
	@%p2 bra 	LBB17_5;

	mul.wide.u32 	%rd6, %r20, 4;
	add.s64 	%rd3, %rd2, %rd6;
	mov.u32 	%r21, %r3;

LBB17_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd3], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB17_4;

LBB17_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB17_2;

LBB17_6:
	ret;

}
	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SumColumns_param_0];
	ld.param.u64 	%rd4, [SumColumns_param_1];
	ld.param.u32 	%r10, [SumColumns_param_2];
	ld.param.u32 	%r11, [SumColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB18_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

LBB18_2:
	@%p2 bra 	LBB18_5;

	mov.u32 	%r21, %r3;

LBB18_4:
	mul.wide.u32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd2, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd6], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB18_4;

LBB18_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB18_2;

LBB18_6:
	ret;

}
	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [MemClear_param_0];
	ld.param.u32 	%r6, [MemClear_param_1];
	ld.param.u32 	%r7, [MemClear_param_2];
	ld.param.u32 	%r8, [MemClear_param_3];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r1, %r9, %r10;
	setp.ge.u32 	%p1, %r14, %r6;
	@%p1 bra 	LBB19_3;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r11;
	cvta.to.global.u64 	%rd1, %rd2;

LBB19_2:
	mad.lo.s32 	%r12, %r14, %r8, %r7;
	mul.wide.u32 	%rd3, %r12, 4;
	add.s64 	%rd4, %rd1, %rd3;
	mov.u32 	%r13, 0;
	st.global.u32 	[%rd4], %r13;
	add.s32 	%r14, %r14, %r3;
	setp.lt.u32 	%p2, %r14, %r6;
	@%p2 bra 	LBB19_2;

LBB19_3:
	ret;

}
	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3
)
{
	.reg .pred 	%p<20>;
	.reg .f32 	%f<51>;
	.reg .b32 	%r<49>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ13FindMinAndMaxE5block[1024];

	ld.param.u64 	%rd1, [FindMinAndMax_param_0];
	ld.param.u32 	%r22, [FindMinAndMax_param_1];
	ld.param.u64 	%rd2, [FindMinAndMax_param_2];
	ld.param.u64 	%rd3, [FindMinAndMax_param_3];
	mov.u32 	%r23, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r23, %r1;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r4, %r2, %r3;
	setp.ge.u32 	%p1, %r4, %r22;
	mov.f32 	%f40, 0f00000000;
	@%p1 bra 	LBB20_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.u32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f40, [%rd6];

LBB20_2:
	shl.b32 	%r24, %r3, 2;
	mov.u32 	%r43, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r26, %r43, %r24;
	st.shared.f32 	[%r26], %f40;
	bar.sync 	0;
	setp.ne.s32 	%p2, %r3, 0;
	@%p2 bra 	LBB20_11;

	sub.s32 	%r27, %r22, %r4;
	min.u32 	%r5, %r27, 256;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f50, 0f00800000;
	mov.f32 	%f49, 0f7F7FFFFF;
	@%p3 bra 	LBB20_10;

	not.b32 	%r29, %r22;
	add.s32 	%r30, %r2, %r29;
	max.u32 	%r31, %r30, -257;
	mov.u32 	%r32, -2;
	sub.s32 	%r33, %r32, %r31;
	and.b32  	%r48, %r5, 3;
	setp.lt.u32 	%p4, %r33, 3;
	mov.f32 	%f49, 0f7F7FFFFF;
	mov.f32 	%f50, 0f00800000;
	mov.u32 	%r45, 0;
	@%p4 bra 	LBB20_7;

	add.s32 	%r36, %r2, -1;
	sub.s32 	%r37, %r36, %r22;
	max.u32 	%r38, %r37, -257;
	add.s32 	%r39, %r38, %r48;
	neg.s32 	%r42, %r39;
	mov.f32 	%f49, 0f7F7FFFFF;
	mov.f32 	%f50, 0f00800000;
	mov.u32 	%r45, 0;

LBB20_6:
	setp.eq.s32 	%p5, %r45, 0;
	ld.shared.f32 	%f25, [%r43];
	setp.gt.ftz.f32 	%p6, %f25, %f50;
	selp.f32 	%f26, %f25, %f50, %p6;
	selp.f32 	%f27, %f25, %f26, %p5;
	setp.lt.ftz.f32 	%p7, %f25, %f49;
	selp.f32 	%f28, %f25, %f49, %p7;
	selp.f32 	%f29, %f25, %f28, %p5;
	ld.shared.f32 	%f30, [%r43+4];
	setp.gt.ftz.f32 	%p8, %f30, %f27;
	selp.f32 	%f31, %f30, %f27, %p8;
	setp.lt.ftz.f32 	%p9, %f30, %f29;
	selp.f32 	%f32, %f30, %f29, %p9;
	ld.shared.f32 	%f33, [%r43+8];
	setp.gt.ftz.f32 	%p10, %f33, %f31;
	selp.f32 	%f34, %f33, %f31, %p10;
	setp.lt.ftz.f32 	%p11, %f33, %f32;
	selp.f32 	%f35, %f33, %f32, %p11;
	ld.shared.f32 	%f36, [%r43+12];
	setp.gt.ftz.f32 	%p12, %f36, %f34;
	selp.f32 	%f50, %f36, %f34, %p12;
	setp.lt.ftz.f32 	%p13, %f36, %f35;
	selp.f32 	%f49, %f36, %f35, %p13;
	add.s32 	%r45, %r45, 4;
	add.s32 	%r43, %r43, 16;
	add.s32 	%r42, %r42, -4;
	setp.ne.s32 	%p14, %r42, 1;
	@%p14 bra 	LBB20_6;

LBB20_7:
	setp.eq.s32 	%p15, %r48, 0;
	@%p15 bra 	LBB20_10;

	shl.b32 	%r40, %r45, 2;
	mov.u32 	%r41, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r46, %r41, %r40;

LBB20_9:
	.pragma "nounroll";
	ld.shared.f32 	%f37, [%r46];
	setp.gt.ftz.f32 	%p16, %f37, %f50;
	setp.eq.s32 	%p17, %r45, 0;
	selp.f32 	%f38, %f37, %f50, %p16;
	selp.f32 	%f50, %f37, %f38, %p17;
	setp.lt.ftz.f32 	%p18, %f37, %f49;
	selp.f32 	%f39, %f37, %f49, %p18;
	selp.f32 	%f49, %f37, %f39, %p17;
	add.s32 	%r45, %r45, 1;
	add.s32 	%r46, %r46, 4;
	add.s32 	%r48, %r48, -1;
	setp.ne.s32 	%p19, %r48, 0;
	@%p19 bra 	LBB20_9;

LBB20_10:
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.u32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f49;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.f32 	[%rd11], %f50;

LBB20_11:
	ret;

}
	// .globl	FindSum
.visible .entry FindSum(
	.param .u64 FindSum_param_0,
	.param .u32 FindSum_param_1,
	.param .u64 FindSum_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<26>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ7FindSumE5block[1024];

	ld.param.u64 	%rd1, [FindSum_param_0];
	ld.param.u32 	%r20, [FindSum_param_1];
	ld.param.u64 	%rd2, [FindSum_param_2];
	mov.u32 	%r21, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r21, %r1, %r2;
	setp.ge.u32 	%p1, %r3, %r20;
	@%p1 bra 	LBB21_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.u32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f8, [%rd5];
	shl.b32 	%r22, %r2, 2;
	mov.u32 	%r23, _ZZ7FindSumE5block;
	add.s32 	%r24, %r23, %r22;
	st.shared.f32 	[%r24], %f8;

LBB21_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r2, 0;
	@%p2 bra 	LBB21_11;

	shl.b32 	%r4, %r1, 8;
	sub.s32 	%r25, %r20, %r4;
	min.u32 	%r5, %r25, 256;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f25, 0f00000000;
	@%p3 bra 	LBB21_10;

	not.b32 	%r27, %r20;
	add.s32 	%r28, %r4, %r27;
	max.u32 	%r29, %r28, -257;
	mov.u32 	%r30, -2;
	sub.s32 	%r31, %r30, %r29;
	and.b32  	%r45, %r5, 3;
	setp.lt.u32 	%p4, %r31, 3;
	mov.f32 	%f25, 0f00000000;
	mov.u32 	%r43, 0;
	@%p4 bra 	LBB21_7;

	add.s32 	%r34, %r4, -1;
	sub.s32 	%r35, %r34, %r20;
	max.u32 	%r36, %r35, -257;
	add.s32 	%r37, %r36, %r45;
	neg.s32 	%r40, %r37;
	mov.f32 	%f25, 0f00000000;
	mov.u32 	%r43, 0;
	mov.u32 	%r41, _ZZ7FindSumE5block;

LBB21_6:
	ld.shared.f32 	%f13, [%r41];
	add.ftz.f32 	%f14, %f25, %f13;
	ld.shared.f32 	%f15, [%r41+4];
	add.ftz.f32 	%f16, %f14, %f15;
	ld.shared.f32 	%f17, [%r41+8];
	add.ftz.f32 	%f18, %f16, %f17;
	ld.shared.f32 	%f19, [%r41+12];
	add.ftz.f32 	%f25, %f18, %f19;
	add.s32 	%r43, %r43, 4;
	add.s32 	%r41, %r41, 16;
	add.s32 	%r40, %r40, -4;
	setp.ne.s32 	%p5, %r40, 1;
	@%p5 bra 	LBB21_6;

LBB21_7:
	setp.eq.s32 	%p6, %r45, 0;
	@%p6 bra 	LBB21_10;

	shl.b32 	%r38, %r43, 2;
	mov.u32 	%r39, _ZZ7FindSumE5block;
	add.s32 	%r44, %r39, %r38;

LBB21_9:
	.pragma "nounroll";
	ld.shared.f32 	%f20, [%r44];
	add.ftz.f32 	%f25, %f25, %f20;
	add.s32 	%r44, %r44, 4;
	add.s32 	%r45, %r45, -1;
	setp.ne.s32 	%p7, %r45, 0;
	@%p7 bra 	LBB21_9;

LBB21_10:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f25;

LBB21_11:
	ret;

}
	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ10FindStdDevE5block[1024];

	ld.param.u64 	%rd1, [FindStdDev_param_0];
	ld.param.u32 	%r20, [FindStdDev_param_1];
	ld.param.f32 	%f8, [FindStdDev_param_2];
	ld.param.u64 	%rd2, [FindStdDev_param_3];
	mov.u32 	%r21, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r21, %r1, %r2;
	setp.ge.u32 	%p1, %r3, %r20;
	@%p1 bra 	LBB22_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.u32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f9, [%rd5];
	shl.b32 	%r22, %r2, 2;
	mov.u32 	%r23, _ZZ10FindStdDevE5block;
	add.s32 	%r24, %r23, %r22;
	st.shared.f32 	[%r24], %f9;

LBB22_2:
	bar.sync 	0;
	setp.ne.s32 	%p2, %r2, 0;
	@%p2 bra 	LBB22_11;

	shl.b32 	%r4, %r1, 8;
	sub.s32 	%r25, %r20, %r4;
	min.u32 	%r5, %r25, 256;
	setp.eq.s32 	%p3, %r5, 0;
	mov.f32 	%f31, 0f00000000;
	@%p3 bra 	LBB22_10;

	not.b32 	%r27, %r20;
	add.s32 	%r28, %r4, %r27;
	max.u32 	%r29, %r28, -257;
	mov.u32 	%r30, -2;
	sub.s32 	%r31, %r30, %r29;
	and.b32  	%r45, %r5, 3;
	setp.lt.u32 	%p4, %r31, 3;
	mov.f32 	%f31, 0f00000000;
	mov.u32 	%r43, 0;
	@%p4 bra 	LBB22_7;

	add.s32 	%r34, %r4, -1;
	sub.s32 	%r35, %r34, %r20;
	max.u32 	%r36, %r35, -257;
	add.s32 	%r37, %r36, %r45;
	neg.s32 	%r40, %r37;
	mov.f32 	%f31, 0f00000000;
	mov.u32 	%r43, 0;
	mov.u32 	%r41, _ZZ10FindStdDevE5block;

LBB22_6:
	ld.shared.f32 	%f14, [%r41];
	sub.ftz.f32 	%f15, %f14, %f8;
	fma.rn.ftz.f32 	%f16, %f15, %f15, %f31;
	ld.shared.f32 	%f17, [%r41+4];
	sub.ftz.f32 	%f18, %f17, %f8;
	fma.rn.ftz.f32 	%f19, %f18, %f18, %f16;
	ld.shared.f32 	%f20, [%r41+8];
	sub.ftz.f32 	%f21, %f20, %f8;
	fma.rn.ftz.f32 	%f22, %f21, %f21, %f19;
	ld.shared.f32 	%f23, [%r41+12];
	sub.ftz.f32 	%f24, %f23, %f8;
	fma.rn.ftz.f32 	%f31, %f24, %f24, %f22;
	add.s32 	%r43, %r43, 4;
	add.s32 	%r41, %r41, 16;
	add.s32 	%r40, %r40, -4;
	setp.ne.s32 	%p5, %r40, 1;
	@%p5 bra 	LBB22_6;

LBB22_7:
	setp.eq.s32 	%p6, %r45, 0;
	@%p6 bra 	LBB22_10;

	shl.b32 	%r38, %r43, 2;
	mov.u32 	%r39, _ZZ10FindStdDevE5block;
	add.s32 	%r44, %r39, %r38;

LBB22_9:
	.pragma "nounroll";
	ld.shared.f32 	%f25, [%r44];
	sub.ftz.f32 	%f26, %f25, %f8;
	fma.rn.ftz.f32 	%f31, %f26, %f26, %f31;
	add.s32 	%r44, %r44, 4;
	add.s32 	%r45, %r45, -1;
	setp.ne.s32 	%p7, %r45, 0;
	@%p7 bra 	LBB22_9;

LBB22_10:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f31;

LBB22_11:
	ret;

}
	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd3, [Constrain_param_0];
	ld.param.u32 	%r6, [Constrain_param_1];
	ld.param.f32 	%f1, [Constrain_param_2];
	ld.param.f32 	%f2, [Constrain_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB23_5;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;

LBB23_2:
	mul.wide.u32 	%rd4, %r10, 4;
	add.s64 	%rd2, %rd1, %rd4;
	ld.global.f32 	%f3, [%rd2];
	setp.geu.ftz.f32 	%p3, %f3, %f1;
	setp.gt.ftz.f32 	%p1, %f3, %f2;
	setp.leu.ftz.f32 	%p4, %f3, %f2;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB23_4;

	selp.f32 	%f4, %f2, %f1, %p1;
	st.global.f32 	[%rd2], %f4;

LBB23_4:
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p6, %r10, %r6;
	@%p6 bra 	LBB23_2;

LBB23_5:
	ret;

}
	// .globl	RoundInPlace
.visible .entry RoundInPlace(
	.param .u64 RoundInPlace_param_0,
	.param .u32 RoundInPlace_param_1,
	.param .f32 RoundInPlace_param_2,
	.param .f32 RoundInPlace_param_3,
	.param .f32 RoundInPlace_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [RoundInPlace_param_0];
	ld.param.u32 	%r6, [RoundInPlace_param_1];
	ld.param.f32 	%f1, [RoundInPlace_param_2];
	ld.param.f32 	%f2, [RoundInPlace_param_3];
	ld.param.f32 	%f3, [RoundInPlace_param_4];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB24_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

LBB24_2:
	mul.wide.u32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f4, [%rd4];
	setp.ltu.ftz.f32 	%p2, %f4, %f3;
	selp.f32 	%f5, %f1, %f2, %p2;
	st.global.f32 	[%rd4], %f5;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	LBB24_2;

LBB24_3:
	ret;

}
	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Pow_param_0];
	ld.param.u64 	%rd4, [Pow_param_1];
	ld.param.u32 	%r6, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB25_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB25_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB25_2;

LBB25_3:
	ret;

}
	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Diagonal_param_0];
	ld.param.u64 	%rd4, [Diagonal_param_1];
	ld.param.u32 	%r6, [Diagonal_param_2];
	ld.param.u32 	%r7, [Diagonal_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r12, %r6;
	setp.ge.u32 	%p2, %r12, %r7;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	LBB26_3;

	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB26_2:
	mad.lo.s32 	%r11, %r12, %r6, %r12;
	mul.wide.u32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.wide.u32 	%rd7, %r12, 4;
	add.s64 	%rd8, %rd2, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r12, %r12, %r3;
	setp.lt.u32 	%p4, %r12, %r6;
	setp.lt.u32 	%p5, %r12, %r7;
	and.pred  	%p6, %p4, %p5;
	@%p6 bra 	LBB26_2;

LBB26_3:
	ret;

}
	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [L1Regularisation_param_0];
	ld.param.u32 	%r6, [L1Regularisation_param_1];
	ld.param.f32 	%f1, [L1Regularisation_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB27_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

LBB27_2:
	mul.wide.u32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	setp.gt.ftz.f32 	%p2, %f2, 0f00000000;
	setp.lt.ftz.f32 	%p3, %f2, 0f00000000;
	selp.f32 	%f3, 0fBF800000, 0f00000000, %p3;
	selp.f32 	%f4, 0f3F800000, %f3, %p2;
	mul.ftz.f32 	%f5, %f4, %f1;
	sub.ftz.f32 	%f6, %f2, %f5;
	st.global.f32 	[%rd4], %f6;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p4, %r10, %r6;
	@%p4 bra 	LBB27_2;

LBB27_3:
	ret;

}
	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r10, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r11, [PointwiseDivideRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB28_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

LBB28_2:
	@%p2 bra 	LBB28_5;

	mul.wide.u32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

LBB28_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f2, [%rd8];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB28_4;

LBB28_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB28_2;

LBB28_6:
	ret;

}
	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r10, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r11, [PointwiseDivideColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB29_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	setp.ge.u32 	%p2, %r3, %r11;

LBB29_2:
	@%p2 bra 	LBB29_5;

	mov.u32 	%r21, %r3;

LBB29_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mul.wide.u32 	%rd7, %r21, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd6], %f3;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB29_4;

LBB29_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB29_2;

LBB29_6:
	ret;

}
	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd5, [SplitRows_param_0];
	ld.param.u64 	%rd6, [SplitRows_param_1];
	ld.param.u64 	%rd7, [SplitRows_param_2];
	ld.param.u32 	%r10, [SplitRows_param_3];
	ld.param.u32 	%r11, [SplitRows_param_4];
	ld.param.u32 	%r12, [SplitRows_param_5];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r23, %r1, %r13, %r14;
	setp.ge.u32 	%p1, %r23, %r10;
	@%p1 bra 	LBB30_9;

	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	mov.u32 	%r18, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r18;
	mov.u32 	%r19, %nctaid.y;
	mul.lo.s32 	%r5, %r15, %r19;
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd6;
	setp.ge.u32 	%p2, %r3, %r11;

LBB30_2:
	@%p2 bra 	LBB30_8;

	mov.u32 	%r24, %r3;

LBB30_4:
	mad.lo.s32 	%r20, %r24, %r10, %r23;
	cvt.u64.u32 	%rd4, %r20;
	mul.wide.u32 	%rd8, %r20, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	setp.lt.u32 	%p3, %r24, %r12;
	@%p3 bra 	LBB30_6;
	bra.uni 	LBB30_5;

LBB30_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd3, %rd12;
	st.global.f32 	[%rd13], %f1;
	bra.uni 	LBB30_7;

LBB30_5:
	sub.s32 	%r21, %r24, %r12;
	mad.lo.s32 	%r22, %r21, %r10, %r23;
	mul.wide.u32 	%rd10, %r22, 4;
	add.s64 	%rd11, %rd2, %rd10;
	st.global.f32 	[%rd11], %f1;

LBB30_7:
	add.s32 	%r24, %r24, %r5;
	setp.lt.u32 	%p4, %r24, %r11;
	@%p4 bra 	LBB30_4;

LBB30_8:
	add.s32 	%r23, %r23, %r4;
	setp.lt.u32 	%p5, %r23, %r10;
	@%p5 bra 	LBB30_2;

LBB30_9:
	ret;

}
	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [SplitColumns_param_0];
	ld.param.u64 	%rd5, [SplitColumns_param_1];
	ld.param.u64 	%rd6, [SplitColumns_param_2];
	ld.param.u32 	%r12, [SplitColumns_param_3];
	ld.param.u32 	%r13, [SplitColumns_param_4];
	ld.param.u32 	%r14, [SplitColumns_param_5];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r1, %r15, %r16;
	setp.ge.u32 	%p1, %r25, %r12;
	@%p1 bra 	LBB31_9;

	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r17, %r18, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r20;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r17, %r21;
	sub.s32 	%r6, %r12, %r14;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd5;
	setp.ge.u32 	%p2, %r3, %r13;

LBB31_2:
	@%p2 bra 	LBB31_8;

	sub.s32 	%r8, %r25, %r14;
	mov.u32 	%r26, %r3;

LBB31_4:
	mad.lo.s32 	%r22, %r26, %r12, %r25;
	mul.wide.u32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	setp.lt.u32 	%p3, %r25, %r14;
	@%p3 bra 	LBB31_6;
	bra.uni 	LBB31_5;

LBB31_6:
	mad.lo.s32 	%r24, %r26, %r14, %r25;
	mul.wide.u32 	%rd11, %r24, 4;
	add.s64 	%rd12, %rd3, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	LBB31_7;

LBB31_5:
	mad.lo.s32 	%r23, %r26, %r6, %r8;
	mul.wide.u32 	%rd9, %r23, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f1;

LBB31_7:
	add.s32 	%r26, %r26, %r5;
	setp.lt.u32 	%p4, %r26, %r13;
	@%p4 bra 	LBB31_4;

LBB31_8:
	add.s32 	%r25, %r25, %r4;
	setp.lt.u32 	%p5, %r25, %r12;
	@%p5 bra 	LBB31_2;

LBB31_9:
	ret;

}
	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd7, [ConcatColumns_param_0];
	ld.param.u64 	%rd8, [ConcatColumns_param_1];
	ld.param.u64 	%rd9, [ConcatColumns_param_2];
	ld.param.u32 	%r11, [ConcatColumns_param_3];
	ld.param.u32 	%r12, [ConcatColumns_param_4];
	ld.param.u32 	%r13, [ConcatColumns_param_5];
	ld.param.u32 	%r14, [ConcatColumns_param_6];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r1, %r15, %r16;
	setp.ge.u32 	%p1, %r25, %r11;
	@%p1 bra 	LBB32_9;

	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r17, %r18, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r20;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r17, %r21;
	cvta.to.global.u64 	%rd1, %rd8;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd9;
	setp.ge.u32 	%p2, %r3, %r12;

LBB32_2:
	@%p2 bra 	LBB32_8;

	sub.s32 	%r7, %r25, %r13;
	mov.u32 	%r26, %r3;

LBB32_4:
	setp.lt.u32 	%p3, %r25, %r13;
	@%p3 bra 	LBB32_6;
	bra.uni 	LBB32_5;

LBB32_6:
	mad.lo.s32 	%r23, %r26, %r13, %r25;
	mul.wide.u32 	%rd11, %r23, 4;
	add.s64 	%rd14, %rd2, %rd11;
	bra.uni 	LBB32_7;

LBB32_5:
	mad.lo.s32 	%r22, %r26, %r14, %r7;
	mul.wide.u32 	%rd10, %r22, 4;
	add.s64 	%rd14, %rd1, %rd10;

LBB32_7:
	ld.global.nc.f32 	%f1, [%rd14];
	mad.lo.s32 	%r24, %r26, %r11, %r25;
	mul.wide.u32 	%rd12, %r24, 4;
	add.s64 	%rd13, %rd3, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r26, %r26, %r5;
	setp.lt.u32 	%p4, %r26, %r12;
	@%p4 bra 	LBB32_4;

LBB32_8:
	add.s32 	%r25, %r25, %r4;
	setp.lt.u32 	%p5, %r25, %r11;
	@%p5 bra 	LBB32_2;

LBB32_9:
	ret;

}
	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd8, [ConcatRows_param_0];
	ld.param.u64 	%rd9, [ConcatRows_param_1];
	ld.param.u64 	%rd10, [ConcatRows_param_2];
	ld.param.u32 	%r10, [ConcatRows_param_3];
	ld.param.u32 	%r11, [ConcatRows_param_4];
	ld.param.u32 	%r12, [ConcatRows_param_5];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r23, %r1, %r13, %r14;
	setp.ge.u32 	%p1, %r23, %r10;
	@%p1 bra 	LBB33_9;

	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	mov.u32 	%r18, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r18;
	mov.u32 	%r19, %nctaid.y;
	mul.lo.s32 	%r5, %r15, %r19;
	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd10;
	setp.ge.u32 	%p2, %r3, %r11;

LBB33_2:
	@%p2 bra 	LBB33_8;

	mov.u32 	%r24, %r3;

LBB33_4:
	mad.lo.s32 	%r20, %r24, %r10, %r23;
	cvt.u64.u32 	%rd4, %r20;
	setp.lt.u32 	%p3, %r24, %r12;
	@%p3 bra 	LBB33_6;
	bra.uni 	LBB33_5;

LBB33_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd15, %rd2, %rd12;
	bra.uni 	LBB33_7;

LBB33_5:
	sub.s32 	%r21, %r24, %r12;
	mad.lo.s32 	%r22, %r21, %r10, %r23;
	mul.wide.u32 	%rd11, %r22, 4;
	add.s64 	%rd15, %rd1, %rd11;

LBB33_7:
	ld.global.nc.f32 	%f1, [%rd15];
	shl.b64 	%rd13, %rd4, 2;
	add.s64 	%rd14, %rd3, %rd13;
	st.global.f32 	[%rd14], %f1;
	add.s32 	%r24, %r24, %r5;
	setp.lt.u32 	%p4, %r24, %r11;
	@%p4 bra 	LBB33_4;

LBB33_8:
	add.s32 	%r23, %r23, %r4;
	setp.lt.u32 	%p5, %r23, %r10;
	@%p5 bra 	LBB33_2;

LBB33_9:
	ret;

}
	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [EuclideanDistance_param_0];
	ld.param.u64 	%rd5, [EuclideanDistance_param_1];
	ld.param.u64 	%rd6, [EuclideanDistance_param_2];
	ld.param.u32 	%r6, [EuclideanDistance_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB34_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

LBB34_2:
	mul.wide.u32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd1, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB34_2;

LBB34_3:
	ret;

}
	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [ManhattanDistance_param_0];
	ld.param.u64 	%rd5, [ManhattanDistance_param_1];
	ld.param.u64 	%rd6, [ManhattanDistance_param_2];
	ld.param.u32 	%r6, [ManhattanDistance_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB35_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

LBB35_2:
	mul.wide.u32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd1, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvt.ftz.f64.f32 	%fd1, %f3;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64 	%f4, %fd2;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB35_2;

LBB35_3:
	ret;

}
	// .globl	CosineDistance
.visible .entry CosineDistance(
	.param .u64 CosineDistance_param_0,
	.param .u64 CosineDistance_param_1,
	.param .u64 CosineDistance_param_2,
	.param .u64 CosineDistance_param_3,
	.param .u64 CosineDistance_param_4,
	.param .u32 CosineDistance_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd6, [CosineDistance_param_0];
	ld.param.u64 	%rd7, [CosineDistance_param_1];
	ld.param.u64 	%rd8, [CosineDistance_param_2];
	ld.param.u64 	%rd9, [CosineDistance_param_3];
	ld.param.u64 	%rd10, [CosineDistance_param_4];
	ld.param.u32 	%r6, [CosineDistance_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB36_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd8;
	cvta.to.global.u64 	%rd4, %rd9;
	cvta.to.global.u64 	%rd5, %rd10;

LBB36_2:
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd1, %rd11;
	add.s64 	%rd13, %rd2, %rd11;
	ld.global.nc.f32 	%f1, [%rd13];
	ld.global.nc.f32 	%f2, [%rd12];
	mul.ftz.f32 	%f3, %f2, %f2;
	atom.global.add.f32 	%f4, [%rd3], %f3;
	mul.ftz.f32 	%f5, %f2, %f1;
	atom.global.add.f32 	%f6, [%rd4], %f5;
	mul.ftz.f32 	%f7, %f1, %f1;
	atom.global.add.f32 	%f8, [%rd5], %f7;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB36_2;

LBB36_3:
	ret;

}
	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Abs_param_0];
	ld.param.u64 	%rd4, [Abs_param_1];
	ld.param.u32 	%r6, [Abs_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB37_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB37_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	cvt.ftz.f64.f32 	%fd1, %f1;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64 	%f2, %fd2;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB37_2;

LBB37_3:
	ret;

}
	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Log_param_0];
	ld.param.u64 	%rd4, [Log_param_1];
	ld.param.u32 	%r6, [Log_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB38_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB38_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB38_2;

LBB38_3:
	ret;

}
	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Normalise_param_0];
	ld.param.u32 	%r6, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB39_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

LBB39_2:
	mul.wide.u32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB39_2;

LBB39_3:
	ret;

}
	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SoftmaxVector_param_0];
	ld.param.u64 	%rd4, [SoftmaxVector_param_1];
	ld.param.u32 	%r6, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB40_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;

LBB40_2:
	mul.wide.u32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd2, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB40_2;

LBB40_3:
	ret;

}
	// .globl	VectorAdd
.visible .entry VectorAdd(
	.param .u64 VectorAdd_param_0,
	.param .u32 VectorAdd_param_1,
	.param .f32 VectorAdd_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [VectorAdd_param_0];
	ld.param.u32 	%r6, [VectorAdd_param_1];
	ld.param.f32 	%f1, [VectorAdd_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	LBB41_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

LBB41_2:
	mul.wide.u32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	LBB41_2;

LBB41_3:
	ret;

}
	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd5, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd6, [VectorCopyRandom_param_2];
	ld.param.u32 	%r6, [VectorCopyRandom_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r11, %r1, %r7, %r8;
	setp.ge.u32 	%p1, %r11, %r6;
	@%p1 bra 	LBB42_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd5;

LBB42_2:
	mul.wide.u32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.u32 	%r10, [%rd8];
	mul.wide.u32 	%rd9, %r10, 4;
	add.s64 	%rd10, %rd2, %rd9;
	add.s64 	%rd11, %rd3, %rd7;
	ld.global.f32 	%f1, [%rd11];
	ld.global.nc.f32 	%f2, [%rd10];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;
	add.s32 	%r11, %r11, %r3;
	setp.lt.u32 	%p2, %r11, %r6;
	@%p2 bra 	LBB42_2;

LBB42_3:
	ret;

}
	// .globl	CopyToMatrixRows
.visible .entry CopyToMatrixRows(
	.param .u64 CopyToMatrixRows_param_0,
	.param .u64 CopyToMatrixRows_param_1,
	.param .u32 CopyToMatrixRows_param_2,
	.param .u32 CopyToMatrixRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [CopyToMatrixRows_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixRows_param_1];
	ld.param.u32 	%r10, [CopyToMatrixRows_param_2];
	ld.param.u32 	%r11, [CopyToMatrixRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB43_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

LBB43_2:
	@%p2 bra 	LBB43_5;

	mul.wide.u32 	%rd6, %r20, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd3, %rd8;
	mov.u32 	%r21, %r3;

LBB43_4:
	mul.wide.u32 	%rd9, %r21, 4;
	add.s64 	%rd10, %rd3, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd11, %r19, 4;
	add.s64 	%rd12, %rd2, %rd11;
	st.global.f32 	[%rd12], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB43_4;

LBB43_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB43_2;

LBB43_6:
	ret;

}
	// .globl	CopyToMatrixColumns
.visible .entry CopyToMatrixColumns(
	.param .u64 CopyToMatrixColumns_param_0,
	.param .u64 CopyToMatrixColumns_param_1,
	.param .u32 CopyToMatrixColumns_param_2,
	.param .u32 CopyToMatrixColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd4, [CopyToMatrixColumns_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixColumns_param_1];
	ld.param.u32 	%r10, [CopyToMatrixColumns_param_2];
	ld.param.u32 	%r11, [CopyToMatrixColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r1, %r12, %r13;
	setp.ge.u32 	%p1, %r20, %r10;
	@%p1 bra 	LBB44_6;

	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r14, %r15, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r17;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r14, %r18;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	setp.ge.u32 	%p2, %r3, %r11;

LBB44_2:
	@%p2 bra 	LBB44_5;

	cvt.u64.u32 	%rd3, %r20;
	mov.u32 	%r21, %r3;

LBB44_4:
	mul.wide.u32 	%rd6, %r21, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd9, %rd8;
	shl.b64 	%rd10, %rd3, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f1, [%rd11];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.u32 	%rd12, %r19, 4;
	add.s64 	%rd13, %rd2, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r21, %r21, %r5;
	setp.lt.u32 	%p3, %r21, %r11;
	@%p3 bra 	LBB44_4;

LBB44_5:
	add.s32 	%r20, %r20, %r4;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB44_2;

LBB44_6:
	ret;

}
	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u32 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u64 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7,
	.param .u32 TensorAddPadding_param_8,
	.param .u32 TensorAddPadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<17>;


	ld.param.u32 	%r10, [TensorAddPadding_param_0];
	ld.param.u64 	%rd1, [TensorAddPadding_param_1];
	ld.param.u64 	%rd2, [TensorAddPadding_param_2];
	ld.param.u32 	%r11, [TensorAddPadding_param_3];
	ld.param.u32 	%r12, [TensorAddPadding_param_4];
	ld.param.u32 	%r13, [TensorAddPadding_param_5];
	ld.param.u32 	%r14, [TensorAddPadding_param_7];
	ld.param.u32 	%r15, [TensorAddPadding_param_8];
	ld.param.u32 	%r16, [TensorAddPadding_param_9];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r37, %r1, %r17, %r18;
	setp.ge.u32 	%p1, %r37, %r10;
	@%p1 bra 	LBB45_5;

	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r19;
	mov.f32 	%f3, 0f00000000;
	mul.lo.s32 	%r27, %r12, %r11;
	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd10, %rd2;

LBB45_2:
	div.u32 	%r20, %r37, %r14;
	div.u32 	%r21, %r20, %r15;
	mul.lo.s32 	%r22, %r21, %r15;
	sub.s32 	%r5, %r20, %r22;
	div.u32 	%r23, %r21, %r13;
	mul.lo.s32 	%r8, %r23, %r13;
	sub.s32 	%r6, %r21, %r8;
	mul.lo.s32 	%r24, %r20, %r14;
	sub.s32 	%r7, %r37, %r24;
	setp.lt.u32 	%p2, %r7, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32 	%p3, %r7, %r25;
	or.pred  	%p4, %p3, %p2;
	setp.lt.u32 	%p5, %r5, %r16;
	or.pred  	%p6, %p4, %p5;
	sub.s32 	%r26, %r15, %r16;
	setp.ge.u32 	%p7, %r5, %r26;
	or.pred  	%p8, %p7, %p6;
	mov.f32 	%f4, %f3;
	@%p8 bra 	LBB45_4;

	mul.lo.s32 	%r28, %r8, %r27;
	mul.wide.u32 	%rd4, %r28, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mul.lo.s32 	%r29, %r6, %r27;
	mul.wide.u32 	%rd6, %r29, 4;
	add.s64 	%rd7, %rd5, %rd6;
	sub.s32 	%r30, %r5, %r16;
	sub.s32 	%r31, %r7, %r16;
	mad.lo.s32 	%r32, %r30, %r11, %r31;
	mul.wide.u32 	%rd8, %r32, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f4, [%rd9];

LBB45_4:
	mul.lo.s32 	%r33, %r15, %r14;
	mul.lo.s32 	%r34, %r8, %r33;
	mul.wide.u32 	%rd11, %r34, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.lo.s32 	%r35, %r6, %r33;
	mul.wide.u32 	%rd13, %r35, 4;
	add.s64 	%rd14, %rd12, %rd13;
	mad.lo.s32 	%r36, %r5, %r14, %r7;
	mul.wide.u32 	%rd15, %r36, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f4;
	add.s32 	%r37, %r37, %r3;
	setp.lt.u32 	%p9, %r37, %r10;
	@%p9 bra 	LBB45_2;

LBB45_5:
	ret;

}
	// .globl	TensorRemovePadding
.visible .entry TensorRemovePadding(
	.param .u32 TensorRemovePadding_param_0,
	.param .u64 TensorRemovePadding_param_1,
	.param .u64 TensorRemovePadding_param_2,
	.param .u32 TensorRemovePadding_param_3,
	.param .u32 TensorRemovePadding_param_4,
	.param .u32 TensorRemovePadding_param_5,
	.param .u32 TensorRemovePadding_param_6,
	.param .u32 TensorRemovePadding_param_7,
	.param .u32 TensorRemovePadding_param_8,
	.param .u32 TensorRemovePadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<17>;


	ld.param.u32 	%r11, [TensorRemovePadding_param_0];
	ld.param.u64 	%rd1, [TensorRemovePadding_param_1];
	ld.param.u64 	%rd2, [TensorRemovePadding_param_2];
	ld.param.u32 	%r12, [TensorRemovePadding_param_3];
	ld.param.u32 	%r13, [TensorRemovePadding_param_4];
	ld.param.u32 	%r14, [TensorRemovePadding_param_5];
	ld.param.u32 	%r15, [TensorRemovePadding_param_7];
	ld.param.u32 	%r16, [TensorRemovePadding_param_8];
	ld.param.u32 	%r17, [TensorRemovePadding_param_9];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r35, %r1, %r18, %r19;
	setp.ge.u32 	%p1, %r35, %r11;
	@%p1 bra 	LBB46_5;

	sub.s32 	%r3, %r12, %r17;
	sub.s32 	%r4, %r13, %r17;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r5, %r1, %r20;
	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r29, %r16, %r15;
	cvta.to.global.u64 	%rd10, %rd2;

LBB46_2:
	div.u32 	%r7, %r35, %r12;
	rem.u32 	%r8, %r7, %r13;
	mul.lo.s32 	%r21, %r7, %r12;
	sub.s32 	%r9, %r35, %r21;
	setp.lt.u32 	%p2, %r9, %r17;
	setp.ge.u32 	%p3, %r9, %r3;
	or.pred  	%p4, %p3, %p2;
	setp.lt.u32 	%p5, %r8, %r17;
	or.pred  	%p6, %p4, %p5;
	setp.ge.u32 	%p7, %r8, %r4;
	or.pred  	%p8, %p7, %p6;
	@%p8 bra 	LBB46_4;

	div.u32 	%r22, %r7, %r13;
	rem.u32 	%r23, %r22, %r14;
	sub.s32 	%r24, %r22, %r23;
	mul.lo.s32 	%r25, %r13, %r12;
	mul.lo.s32 	%r26, %r24, %r25;
	mul.wide.u32 	%rd4, %r26, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mul.lo.s32 	%r27, %r23, %r25;
	mul.wide.u32 	%rd6, %r27, 4;
	add.s64 	%rd7, %rd5, %rd6;
	mad.lo.s32 	%r28, %r8, %r12, %r9;
	mul.wide.u32 	%rd8, %r28, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	mul.lo.s32 	%r30, %r24, %r29;
	mul.wide.u32 	%rd11, %r30, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.lo.s32 	%r31, %r23, %r29;
	mul.wide.u32 	%rd13, %r31, 4;
	add.s64 	%rd14, %rd12, %rd13;
	sub.s32 	%r32, %r8, %r17;
	sub.s32 	%r33, %r9, %r17;
	mad.lo.s32 	%r34, %r32, %r15, %r33;
	mul.wide.u32 	%rd15, %r34, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f1;

LBB46_4:
	add.s32 	%r35, %r35, %r5;
	setp.lt.u32 	%p9, %r35, %r11;
	@%p9 bra 	LBB46_2;

LBB46_5:
	ret;

}
	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u32 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u64 TensorIm2Col_param_2,
	.param .u64 TensorIm2Col_param_3,
	.param .u64 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9,
	.param .u32 TensorIm2Col_param_10,
	.param .u32 TensorIm2Col_param_11,
	.param .u32 TensorIm2Col_param_12,
	.param .u32 TensorIm2Col_param_13,
	.param .u32 TensorIm2Col_param_14,
	.param .u32 TensorIm2Col_param_15
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<22>;


	ld.param.u32 	%r7, [TensorIm2Col_param_0];
	ld.param.u64 	%rd3, [TensorIm2Col_param_1];
	ld.param.u64 	%rd4, [TensorIm2Col_param_2];
	ld.param.u64 	%rd5, [TensorIm2Col_param_3];
	ld.param.u64 	%rd6, [TensorIm2Col_param_4];
	ld.param.u32 	%r8, [TensorIm2Col_param_5];
	ld.param.u32 	%r9, [TensorIm2Col_param_6];
	ld.param.u32 	%r10, [TensorIm2Col_param_7];
	ld.param.u32 	%r11, [TensorIm2Col_param_9];
	ld.param.u32 	%r12, [TensorIm2Col_param_10];
	ld.param.u32 	%r13, [TensorIm2Col_param_11];
	ld.param.u32 	%r14, [TensorIm2Col_param_12];
	ld.param.u32 	%r15, [TensorIm2Col_param_13];
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r45, %r17, %r16, %r18;
	setp.ge.u32 	%p1, %r45, %r7;
	@%p1 bra 	LBB47_3;

	mul.lo.s32 	%r2, %r9, %r8;
	mul.lo.s32 	%r3, %r2, %r10;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r20;
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd7, %rd5;
	cvta.to.global.u64 	%rd10, %rd6;
	mul.lo.s32 	%r37, %r12, %r11;

LBB47_2:
	div.u32 	%r21, %r45, %r14;
	div.u32 	%r22, %r21, %r15;
	mul.lo.s32 	%r23, %r22, %r15;
	sub.s32 	%r24, %r21, %r23;
	div.u32 	%r25, %r22, %r10;
	mul.lo.s32 	%r26, %r25, %r10;
	sub.s32 	%r27, %r22, %r26;
	div.u32 	%r28, %r25, %r13;
	mul.lo.s32 	%r29, %r28, %r13;
	sub.s32 	%r30, %r25, %r29;
	mul.wide.u32 	%rd8, %r30, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	cvt.rzi.ftz.u32.f32 	%r31, %f1;
	add.s64 	%rd11, %rd10, %rd8;
	ld.global.nc.f32 	%f2, [%rd11];
	cvt.rzi.ftz.u32.f32 	%r32, %f2;
	mul.lo.s32 	%r33, %r21, %r14;
	sub.s32 	%r34, %r45, %r33;
	mad.lo.s32 	%r35, %r27, %r14, %r34;
	mad.lo.s32 	%r36, %r35, %r15, %r24;
	mul.lo.s32 	%r38, %r37, %r28;
	mul.wide.u32 	%rd12, %r38, 4;
	add.s64 	%rd13, %rd2, %rd12;
	mul.lo.s32 	%r39, %r3, %r28;
	mul.wide.u32 	%rd14, %r39, 4;
	add.s64 	%rd15, %rd1, %rd14;
	mul.lo.s32 	%r40, %r27, %r2;
	mul.wide.u32 	%rd16, %r40, 4;
	add.s64 	%rd17, %rd15, %rd16;
	add.s32 	%r41, %r31, %r34;
	add.s32 	%r42, %r32, %r24;
	mad.lo.s32 	%r43, %r41, %r8, %r42;
	mul.wide.u32 	%rd18, %r43, 4;
	add.s64 	%rd19, %rd17, %rd18;
	ld.global.nc.f32 	%f3, [%rd19];
	mad.lo.s32 	%r44, %r36, %r11, %r30;
	mul.wide.u32 	%rd20, %r44, 4;
	add.s64 	%rd21, %rd13, %rd20;
	st.global.f32 	[%rd21], %f3;
	add.s32 	%r45, %r45, %r4;
	setp.lt.u32 	%p2, %r45, %r7;
	@%p2 bra 	LBB47_2;

LBB47_3:
	ret;

}
	// .globl	TensorReverseIm2Col
.visible .entry TensorReverseIm2Col(
	.param .u32 TensorReverseIm2Col_param_0,
	.param .u64 TensorReverseIm2Col_param_1,
	.param .u64 TensorReverseIm2Col_param_2,
	.param .u64 TensorReverseIm2Col_param_3,
	.param .u64 TensorReverseIm2Col_param_4,
	.param .u64 TensorReverseIm2Col_param_5,
	.param .u32 TensorReverseIm2Col_param_6,
	.param .u32 TensorReverseIm2Col_param_7,
	.param .u32 TensorReverseIm2Col_param_8,
	.param .u32 TensorReverseIm2Col_param_9,
	.param .u32 TensorReverseIm2Col_param_10,
	.param .u32 TensorReverseIm2Col_param_11,
	.param .u32 TensorReverseIm2Col_param_12,
	.param .u32 TensorReverseIm2Col_param_13,
	.param .u32 TensorReverseIm2Col_param_14,
	.param .u32 TensorReverseIm2Col_param_15,
	.param .u32 TensorReverseIm2Col_param_16,
	.param .u32 TensorReverseIm2Col_param_17
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<58>;
	.reg .b64 	%rd<32>;


	ld.param.u32 	%r19, [TensorReverseIm2Col_param_0];
	ld.param.u64 	%rd6, [TensorReverseIm2Col_param_1];
	ld.param.u64 	%rd7, [TensorReverseIm2Col_param_2];
	ld.param.u64 	%rd8, [TensorReverseIm2Col_param_3];
	ld.param.u64 	%rd9, [TensorReverseIm2Col_param_4];
	ld.param.u64 	%rd10, [TensorReverseIm2Col_param_5];
	ld.param.u32 	%r20, [TensorReverseIm2Col_param_6];
	ld.param.u32 	%r21, [TensorReverseIm2Col_param_7];
	ld.param.u32 	%r22, [TensorReverseIm2Col_param_8];
	ld.param.u32 	%r23, [TensorReverseIm2Col_param_10];
	ld.param.u32 	%r24, [TensorReverseIm2Col_param_11];
	ld.param.u32 	%r25, [TensorReverseIm2Col_param_12];
	ld.param.u32 	%r26, [TensorReverseIm2Col_param_13];
	ld.param.u32 	%r27, [TensorReverseIm2Col_param_14];
	ld.param.u32 	%r28, [TensorReverseIm2Col_param_15];
	ld.param.u32 	%r29, [TensorReverseIm2Col_param_16];
	ld.param.u32 	%r30, [TensorReverseIm2Col_param_17];
	mov.u32 	%r31, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r32, %tid.x;
	mad.lo.s32 	%r57, %r1, %r31, %r32;
	setp.ge.u32 	%p1, %r57, %r19;
	@%p1 bra 	LBB48_5;

	mul.lo.s32 	%r3, %r21, %r20;
	mul.lo.s32 	%r4, %r3, %r22;
	mul.lo.s32 	%r5, %r25, %r24;
	mul.lo.s32 	%r6, %r5, %r30;
	mul.lo.s32 	%r7, %r29, %r28;
	mul.lo.s32 	%r8, %r7, %r30;
	mov.u32 	%r33, %nctaid.x;
	mul.lo.s32 	%r9, %r1, %r33;
	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd10;
	cvta.to.global.u64 	%rd3, %rd6;
	cvta.to.global.u64 	%rd4, %rd7;
	cvta.to.global.u64 	%rd5, %rd8;

LBB48_2:
	div.u32 	%r11, %r57, %r30;
	div.u32 	%r12, %r11, %r24;
	div.u32 	%r13, %r12, %r25;
	rem.u32 	%r34, %r13, %r23;
	mul.wide.u32 	%rd11, %r34, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	cvt.rzi.ftz.u32.f32 	%r14, %f1;
	add.s64 	%rd13, %rd2, %rd11;
	ld.global.nc.f32 	%f2, [%rd13];
	cvt.rzi.ftz.u32.f32 	%r15, %f2;
	div.u32 	%r16, %r14, %r26;
	div.u32 	%r17, %r15, %r27;
	setp.ge.u32 	%p2, %r16, %r21;
	setp.ge.u32 	%p3, %r17, %r20;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB48_4;

	rem.u32 	%r35, %r11, %r24;
	rem.u32 	%r36, %r12, %r25;
	div.u32 	%r37, %r13, %r23;
	div.u32 	%r38, %r37, %r22;
	mul.lo.s32 	%r39, %r38, %r22;
	sub.s32 	%r40, %r37, %r39;
	rem.u32 	%r41, %r57, %r30;
	mad.lo.s32 	%r42, %r16, %r20, %r17;
	mul.lo.s32 	%r43, %r3, %r40;
	mul.lo.s32 	%r44, %r4, %r38;
	mul.wide.u32 	%rd14, %r44, 4;
	add.s64 	%rd15, %rd3, %rd14;
	mul.wide.u32 	%rd16, %r43, 4;
	add.s64 	%rd17, %rd15, %rd16;
	mul.wide.u32 	%rd18, %r42, 4;
	add.s64 	%rd19, %rd17, %rd18;
	not.b32 	%r45, %r35;
	add.s32 	%r46, %r45, %r24;
	not.b32 	%r47, %r36;
	add.s32 	%r48, %r47, %r25;
	mad.lo.s32 	%r49, %r46, %r25, %r48;
	add.s32 	%r50, %r14, %r35;
	add.s32 	%r51, %r15, %r36;
	mad.lo.s32 	%r52, %r50, %r28, %r51;
	mul.lo.s32 	%r53, %r5, %r41;
	mul.lo.s32 	%r54, %r6, %r40;
	mul.wide.u32 	%rd20, %r54, 4;
	add.s64 	%rd21, %rd4, %rd20;
	mul.wide.u32 	%rd22, %r53, 4;
	add.s64 	%rd23, %rd21, %rd22;
	mul.wide.u32 	%rd24, %r49, 4;
	add.s64 	%rd25, %rd23, %rd24;
	ld.global.nc.f32 	%f3, [%rd25];
	ld.global.nc.f32 	%f4, [%rd19];
	mul.ftz.f32 	%f5, %f4, %f3;
	mul.lo.s32 	%r55, %r7, %r41;
	mul.lo.s32 	%r56, %r8, %r38;
	mul.wide.u32 	%rd26, %r56, 4;
	add.s64 	%rd27, %rd5, %rd26;
	mul.wide.u32 	%rd28, %r55, 4;
	add.s64 	%rd29, %rd27, %rd28;
	mul.wide.u32 	%rd30, %r52, 4;
	add.s64 	%rd31, %rd29, %rd30;
	atom.global.add.f32 	%f6, [%rd31], %f5;

LBB48_4:
	add.s32 	%r57, %r57, %r9;
	setp.lt.u32 	%p5, %r57, %r19;
	@%p5 bra 	LBB48_2;

LBB48_5:
	ret;

}
	// .globl	SoftmaxDerivative
.visible .entry SoftmaxDerivative(
	.param .u64 SoftmaxDerivative_param_0,
	.param .u64 SoftmaxDerivative_param_1,
	.param .u32 SoftmaxDerivative_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [SoftmaxDerivative_param_0];
	ld.param.u64 	%rd3, [SoftmaxDerivative_param_1];
	ld.param.u32 	%r10, [SoftmaxDerivative_param_2];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r19, %r1, %r11, %r12;
	setp.ge.u32 	%p1, %r19, %r10;
	@%p1 bra 	LBB49_8;

	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r3, %r13, %r14, %r15;
	mov.u32 	%r16, %nctaid.x;
	mul.lo.s32 	%r4, %r1, %r16;
	mov.u32 	%r17, %nctaid.y;
	mul.lo.s32 	%r5, %r13, %r17;
	cvta.to.global.u64 	%rd2, %rd3;
	setp.ge.u32 	%p2, %r3, %r10;
	mov.f32 	%f5, 0f3F800000;

LBB49_2:
	@%p2 bra 	LBB49_7;

	mul.wide.u32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	sub.ftz.f32 	%f6, %f5, %f1;
	mul.ftz.f32 	%f2, %f1, %f6;
	mov.u32 	%r20, %r3;

LBB49_4:
	setp.eq.s32 	%p3, %r19, %r20;
	mov.f32 	%f9, %f2;
	@%p3 bra 	LBB49_6;

	mul.wide.u32 	%rd7, %r20, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f7, [%rd8];
	mul.ftz.f32 	%f8, %f1, %f7;
	neg.ftz.f32 	%f9, %f8;

LBB49_6:
	mad.lo.s32 	%r18, %r20, %r10, %r19;
	mul.wide.u32 	%rd9, %r18, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f9;
	add.s32 	%r20, %r20, %r5;
	setp.lt.u32 	%p4, %r20, %r10;
	@%p4 bra 	LBB49_4;

LBB49_7:
	add.s32 	%r19, %r19, %r4;
	setp.lt.u32 	%p5, %r19, %r10;
	@%p5 bra 	LBB49_2;

LBB49_8:
	ret;

}
	// .globl	RotateInPlace
.visible .entry RotateInPlace(
	.param .u64 RotateInPlace_param_0,
	.param .u32 RotateInPlace_param_1,
	.param .u32 RotateInPlace_param_2,
	.param .u32 RotateInPlace_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [RotateInPlace_param_0];
	ld.param.u32 	%r6, [RotateInPlace_param_1];
	ld.param.u32 	%r7, [RotateInPlace_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r16, %r1, %r8, %r9;
	setp.ge.u32 	%p1, %r16, %r6;
	@%p1 bra 	LBB50_3;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r10;

LBB50_2:
	rem.u32 	%r11, %r16, %r7;
	sub.s32 	%r12, %r16, %r11;
	not.b32 	%r13, %r11;
	add.s32 	%r14, %r13, %r7;
	add.s32 	%r15, %r14, %r12;
	mul.wide.u32 	%rd3, %r15, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mul.wide.u32 	%rd5, %r16, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f2, [%rd6];
	st.global.f32 	[%rd4], %f2;
	st.global.f32 	[%rd6], %f1;
	add.s32 	%r16, %r16, %r3;
	setp.lt.u32 	%p2, %r16, %r6;
	@%p2 bra 	LBB50_2;

LBB50_3:
	ret;

}
	// .globl	TensorMaxPool
.visible .entry TensorMaxPool(
	.param .u32 TensorMaxPool_param_0,
	.param .u64 TensorMaxPool_param_1,
	.param .u64 TensorMaxPool_param_2,
	.param .u64 TensorMaxPool_param_3,
	.param .u64 TensorMaxPool_param_4,
	.param .u64 TensorMaxPool_param_5,
	.param .u32 TensorMaxPool_param_6,
	.param .u32 TensorMaxPool_param_7,
	.param .u32 TensorMaxPool_param_8,
	.param .u32 TensorMaxPool_param_9,
	.param .u32 TensorMaxPool_param_10,
	.param .u32 TensorMaxPool_param_11,
	.param .u32 TensorMaxPool_param_12,
	.param .u32 TensorMaxPool_param_13,
	.param .u32 TensorMaxPool_param_14,
	.param .u32 TensorMaxPool_param_15,
	.param .u32 TensorMaxPool_param_16,
	.param .u32 TensorMaxPool_param_17
)
{
	.reg .pred 	%p<34>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<115>;
	.reg .b64 	%rd<42>;


	ld.param.u32 	%r44, [TensorMaxPool_param_0];
	ld.param.u64 	%rd9, [TensorMaxPool_param_1];
	ld.param.u64 	%rd10, [TensorMaxPool_param_2];
	ld.param.u64 	%rd11, [TensorMaxPool_param_3];
	ld.param.u64 	%rd12, [TensorMaxPool_param_4];
	ld.param.u64 	%rd13, [TensorMaxPool_param_5];
	ld.param.u32 	%r46, [TensorMaxPool_param_7];
	ld.param.u32 	%r47, [TensorMaxPool_param_8];
	ld.param.u32 	%r49, [TensorMaxPool_param_11];
	ld.param.u32 	%r50, [TensorMaxPool_param_12];
	ld.param.u32 	%r51, [TensorMaxPool_param_13];
	ld.param.u32 	%r52, [TensorMaxPool_param_14];
	ld.param.u32 	%r55, [TensorMaxPool_param_17];
	mov.u32 	%r56, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r57, %tid.x;
	mad.lo.s32 	%r100, %r1, %r56, %r57;
	setp.ge.u32 	%p2, %r100, %r44;
	@%p2 bra 	LBB51_16;

	mul.lo.s32 	%r3, %r50, %r49;
	mul.lo.s32 	%r4, %r47, %r46;
	mov.u32 	%r58, %nctaid.x;
	mul.lo.s32 	%r5, %r1, %r58;
	add.s32 	%r6, %r52, -1;
	setp.eq.s32 	%p3, %r52, 0;
	setp.eq.s32 	%p4, %r51, 0;
	or.pred  	%p1, %p4, %p3;
	and.b32  	%r7, %r52, 3;
	sub.s32 	%r8, %r7, %r52;
	cvta.to.global.u64 	%rd1, %rd12;
	cvta.to.global.u64 	%rd2, %rd13;
	cvta.to.global.u64 	%rd3, %rd11;
	cvta.to.global.u64 	%rd4, %rd10;
	cvta.to.global.u64 	%rd5, %rd9;
	mov.f32 	%f11, 0f00000000;
	setp.eq.s32 	%p32, %r55, 0;
	setp.lt.u32 	%p5, %r6, 3;
	setp.eq.s32 	%p19, %r7, 0;

LBB51_2:
	ld.param.u32 	%r97, [TensorMaxPool_param_9];
	ld.param.u32 	%r96, [TensorMaxPool_param_6];
	div.u32 	%r60, %r100, %r96;
	div.u32 	%r61, %r60, %r97;
	mul.lo.s32 	%r13, %r61, %r97;
	sub.s32 	%r10, %r60, %r13;
	mul.lo.s32 	%r62, %r60, %r96;
	sub.s32 	%r63, %r100, %r62;
	mul.wide.u32 	%rd14, %r63, 4;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.nc.f32 	%f12, [%rd15];
	cvt.rzi.ftz.u32.f32 	%r11, %f12;
	add.s64 	%rd16, %rd2, %rd14;
	ld.global.nc.f32 	%f13, [%rd16];
	cvt.rzi.ftz.u32.f32 	%r12, %f13;
	mul.lo.s32 	%r64, %r3, %r60;
	cvt.u64.u32 	%rd6, %r64;
	mov.u32 	%r112, -1;
	mov.f32 	%f31, %f11;
	@%p1 bra 	LBB51_13;

	mul.lo.s32 	%r68, %r4, %r10;
	mul.lo.s32 	%r69, %r13, %r4;
	mul.wide.u32 	%rd17, %r69, 4;
	add.s64 	%rd18, %rd5, %rd17;
	mul.wide.u32 	%rd19, %r68, 4;
	add.s64 	%rd7, %rd18, %rd19;
	add.s32 	%r14, %r12, 3;
	mov.u32 	%r112, -1;
	mov.u32 	%r101, 0;
	mov.u32 	%r113, %r101;
	mov.f32 	%f31, %f11;

LBB51_4:
	mov.u32 	%r109, 0;
	ld.param.u32 	%r98, [TensorMaxPool_param_7];
	add.s32 	%r72, %r101, %r11;
	mul.lo.s32 	%r18, %r72, %r98;
	@%p5 bra 	LBB51_8;

	add.s32 	%r104, %r14, %r18;
	mov.u32 	%r109, 0;

LBB51_6:
	add.s32 	%r74, %r104, -3;
	mul.wide.u32 	%rd20, %r74, 4;
	add.s64 	%rd21, %rd7, %rd20;
	ld.global.nc.f32 	%f16, [%rd21];
	setp.gt.ftz.f32 	%p6, %f16, %f31;
	setp.lt.s32 	%p7, %r112, 0;
	or.pred  	%p8, %p7, %p6;
	selp.f32 	%f17, %f16, %f31, %p8;
	add.s32 	%r75, %r113, %r109;
	selp.b32 	%r76, %r75, %r112, %p8;
	add.s32 	%r77, %r104, -2;
	mul.wide.u32 	%rd22, %r77, 4;
	add.s64 	%rd23, %rd7, %rd22;
	setp.lt.s32 	%p9, %r76, 0;
	ld.global.nc.f32 	%f18, [%rd23];
	setp.gt.ftz.f32 	%p10, %f18, %f17;
	or.pred  	%p11, %p9, %p10;
	selp.f32 	%f19, %f18, %f17, %p11;
	add.s32 	%r78, %r75, 1;
	selp.b32 	%r79, %r78, %r76, %p11;
	add.s32 	%r80, %r104, -1;
	mul.wide.u32 	%rd24, %r80, 4;
	add.s64 	%rd25, %rd7, %rd24;
	setp.lt.s32 	%p12, %r79, 0;
	ld.global.nc.f32 	%f20, [%rd25];
	setp.gt.ftz.f32 	%p13, %f20, %f19;
	or.pred  	%p14, %p12, %p13;
	selp.f32 	%f21, %f20, %f19, %p14;
	add.s32 	%r81, %r75, 2;
	selp.b32 	%r82, %r81, %r79, %p14;
	mul.wide.u32 	%rd26, %r104, 4;
	add.s64 	%rd27, %rd7, %rd26;
	setp.lt.s32 	%p15, %r82, 0;
	ld.global.nc.f32 	%f22, [%rd27];
	setp.gt.ftz.f32 	%p16, %f22, %f21;
	or.pred  	%p17, %p15, %p16;
	selp.f32 	%f31, %f22, %f21, %p17;
	add.s32 	%r83, %r75, 3;
	selp.b32 	%r112, %r83, %r82, %p17;
	add.s32 	%r104, %r104, 4;
	add.s32 	%r109, %r109, 4;
	add.s32 	%r84, %r8, %r109;
	setp.ne.s32 	%p18, %r84, 0;
	@%p18 bra 	LBB51_6;

	add.s32 	%r113, %r113, %r109;

LBB51_8:
	mov.u32 	%r30, %r113;
	@%p19 bra 	LBB51_12;

	setp.eq.s32 	%p20, %r7, 1;
	add.s32 	%r85, %r18, %r12;
	add.s32 	%r32, %r85, %r109;
	mul.wide.u32 	%rd28, %r32, 4;
	add.s64 	%rd29, %rd7, %rd28;
	ld.global.nc.f32 	%f23, [%rd29];
	setp.gt.ftz.f32 	%p21, %f23, %f31;
	setp.lt.s32 	%p22, %r112, 0;
	or.pred  	%p23, %p22, %p21;
	selp.f32 	%f31, %f23, %f31, %p23;
	selp.b32 	%r112, %r30, %r112, %p23;
	add.s32 	%r113, %r30, 1;
	@%p20 bra 	LBB51_12;

	setp.eq.s32 	%p24, %r7, 2;
	add.s32 	%r86, %r32, 1;
	mul.wide.u32 	%rd30, %r86, 4;
	add.s64 	%rd31, %rd7, %rd30;
	ld.global.nc.f32 	%f24, [%rd31];
	setp.gt.ftz.f32 	%p25, %f24, %f31;
	setp.lt.s32 	%p26, %r112, 0;
	or.pred  	%p27, %p26, %p25;
	selp.f32 	%f31, %f24, %f31, %p27;
	selp.b32 	%r112, %r113, %r112, %p27;
	add.s32 	%r113, %r30, 2;
	@%p24 bra 	LBB51_12;

	add.s32 	%r87, %r32, 2;
	mul.wide.u32 	%rd32, %r87, 4;
	add.s64 	%rd33, %rd7, %rd32;
	ld.global.nc.f32 	%f25, [%rd33];
	setp.gt.ftz.f32 	%p28, %f25, %f31;
	setp.lt.s32 	%p29, %r112, 0;
	or.pred  	%p30, %p29, %p28;
	selp.f32 	%f31, %f25, %f31, %p30;
	selp.b32 	%r112, %r113, %r112, %p30;
	add.s32 	%r113, %r30, 3;

LBB51_12:
	ld.param.u32 	%r91, [TensorMaxPool_param_13];
	add.s32 	%r101, %r101, 1;
	setp.lt.u32 	%p31, %r101, %r91;
	@%p31 bra 	LBB51_4;

LBB51_13:
	ld.param.u32 	%r94, [TensorMaxPool_param_16];
	ld.param.u32 	%r93, [TensorMaxPool_param_15];
	ld.param.u32 	%r92, [TensorMaxPool_param_11];
	div.u32 	%r88, %r11, %r93;
	div.u32 	%r89, %r12, %r94;
	mad.lo.s32 	%r90, %r88, %r92, %r89;
	cvt.u64.u32 	%rd8, %r90;
	@%p32 bra 	LBB51_15;

	shl.b64 	%rd34, %rd6, 2;
	add.s64 	%rd35, %rd3, %rd34;
	shl.b64 	%rd36, %rd8, 2;
	add.s64 	%rd37, %rd35, %rd36;
	cvt.rn.f32.s32 	%f26, %r112;
	st.global.f32 	[%rd37], %f26;

LBB51_15:
	ld.param.u32 	%r95, [TensorMaxPool_param_0];
	shl.b64 	%rd38, %rd6, 2;
	add.s64 	%rd39, %rd4, %rd38;
	shl.b64 	%rd40, %rd8, 2;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f32 	[%rd41], %f31;
	add.s32 	%r100, %r100, %r5;
	setp.lt.u32 	%p33, %r100, %r95;
	@%p33 bra 	LBB51_2;

LBB51_16:
	ret;

}
	// .globl	TensorReverseMaxPool
.visible .entry TensorReverseMaxPool(
	.param .u32 TensorReverseMaxPool_param_0,
	.param .u64 TensorReverseMaxPool_param_1,
	.param .u64 TensorReverseMaxPool_param_2,
	.param .u64 TensorReverseMaxPool_param_3,
	.param .u32 TensorReverseMaxPool_param_4,
	.param .u32 TensorReverseMaxPool_param_5,
	.param .u32 TensorReverseMaxPool_param_6,
	.param .u32 TensorReverseMaxPool_param_7,
	.param .u32 TensorReverseMaxPool_param_8,
	.param .u32 TensorReverseMaxPool_param_9,
	.param .u32 TensorReverseMaxPool_param_10,
	.param .u32 TensorReverseMaxPool_param_11,
	.param .u32 TensorReverseMaxPool_param_12,
	.param .u32 TensorReverseMaxPool_param_13
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<19>;


	ld.param.u32 	%r8, [TensorReverseMaxPool_param_0];
	ld.param.u64 	%rd4, [TensorReverseMaxPool_param_1];
	ld.param.u64 	%rd5, [TensorReverseMaxPool_param_2];
	ld.param.u64 	%rd6, [TensorReverseMaxPool_param_3];
	ld.param.u32 	%r9, [TensorReverseMaxPool_param_4];
	ld.param.u32 	%r10, [TensorReverseMaxPool_param_5];
	ld.param.u32 	%r11, [TensorReverseMaxPool_param_6];
	ld.param.u32 	%r12, [TensorReverseMaxPool_param_8];
	ld.param.u32 	%r13, [TensorReverseMaxPool_param_9];
	ld.param.u32 	%r14, [TensorReverseMaxPool_param_11];
	ld.param.u32 	%r15, [TensorReverseMaxPool_param_12];
	ld.param.u32 	%r16, [TensorReverseMaxPool_param_13];
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r41, %r1, %r17, %r18;
	setp.ge.u32 	%p1, %r41, %r8;
	@%p1 bra 	LBB52_3;

	mul.lo.s32 	%r3, %r10, %r9;
	mul.lo.s32 	%r4, %r13, %r12;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r5, %r1, %r19;
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;

LBB52_2:
	div.u32 	%r20, %r41, %r9;
	div.u32 	%r21, %r20, %r10;
	mul.lo.s32 	%r22, %r21, %r10;
	sub.s32 	%r23, %r20, %r22;
	div.u32 	%r24, %r21, %r11;
	mul.lo.s32 	%r25, %r24, %r11;
	sub.s32 	%r26, %r21, %r25;
	mul.lo.s32 	%r27, %r3, %r21;
	mul.wide.u32 	%rd7, %r27, 4;
	add.s64 	%rd8, %rd1, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	mul.lo.s32 	%r28, %r25, %r4;
	mul.wide.u32 	%rd10, %r28, 4;
	add.s64 	%rd11, %rd3, %rd10;
	mul.lo.s32 	%r29, %r4, %r26;
	mul.wide.u32 	%rd12, %r29, 4;
	add.s64 	%rd13, %rd11, %rd12;
	mul.lo.s32 	%r30, %r20, %r9;
	sub.s32 	%r31, %r41, %r30;
	mad.lo.s32 	%r32, %r23, %r9, %r31;
	mul.wide.u32 	%rd14, %r32, 4;
	add.s64 	%rd15, %rd8, %rd14;
	ld.global.nc.f32 	%f1, [%rd15];
	add.s64 	%rd16, %rd9, %rd14;
	ld.global.nc.f32 	%f2, [%rd16];
	cvt.rzi.ftz.s32.f32 	%r33, %f2;
	max.s32 	%r34, %r33, 0;
	div.u32 	%r35, %r34, %r14;
	mad.lo.s32 	%r36, %r23, %r15, %r35;
	mul.lo.s32 	%r37, %r35, %r14;
	sub.s32 	%r38, %r34, %r37;
	mad.lo.s32 	%r39, %r31, %r16, %r38;
	mad.lo.s32 	%r40, %r36, %r12, %r39;
	mul.wide.u32 	%rd17, %r40, 4;
	add.s64 	%rd18, %rd13, %rd17;
	st.global.f32 	[%rd18], %f1;
	add.s32 	%r41, %r41, %r5;
	setp.lt.u32 	%p2, %r41, %r8;
	@%p2 bra 	LBB52_2;

LBB52_3:
	ret;

}
	// .globl	CalculateDistances
.visible .entry CalculateDistances(
	.param .u64 CalculateDistances_param_0,
	.param .u64 CalculateDistances_param_1,
	.param .u64 CalculateDistances_param_2,
	.param .u32 CalculateDistances_param_3,
	.param .u32 CalculateDistances_param_4,
	.param .u32 CalculateDistances_param_5,
	.param .u32 CalculateDistances_param_6
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<54>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<40>;


	ld.param.u64 	%rd4, [CalculateDistances_param_0];
	ld.param.u64 	%rd5, [CalculateDistances_param_1];
	ld.param.u64 	%rd6, [CalculateDistances_param_2];
	ld.param.u32 	%r22, [CalculateDistances_param_3];
	ld.param.u32 	%r23, [CalculateDistances_param_4];
	ld.param.u32 	%r24, [CalculateDistances_param_5];
	ld.param.u32 	%r25, [CalculateDistances_param_6];
	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r26, %ctaid.x;
	mov.u32 	%r27, %ntid.x;
	mov.u32 	%r28, %tid.x;
	mad.lo.s32 	%r47, %r27, %r26, %r28;
	setp.ge.u32 	%p1, %r47, %r24;
	@%p1 bra 	LBB53_18;

	mov.u32 	%r29, %ntid.y;
	mov.u32 	%r30, %ctaid.z;
	mov.u32 	%r31, %ntid.z;
	mov.u32 	%r32, %tid.z;
	mad.lo.s32 	%r2, %r31, %r30, %r32;
	mov.u32 	%r33, %nctaid.y;
	mul.lo.s32 	%r3, %r29, %r33;
	mov.u32 	%r34, %nctaid.z;
	mul.lo.s32 	%r4, %r31, %r34;
	setp.ge.u32 	%p3, %r2, %r22;
	cvta.to.global.u64 	%rd7, %rd4;
	setp.eq.s32 	%p4, %r25, 0;
	setp.eq.s32 	%p5, %r25, 1;
	setp.ne.s32 	%p6, %r25, 2;

LBB53_2:
	mov.u32 	%r35, %ctaid.y;
	mov.u32 	%r37, %tid.y;
	mad.lo.s32 	%r48, %r29, %r35, %r37;
	setp.ge.u32 	%p2, %r48, %r23;
	@%p2 bra 	LBB53_17;

	cvt.u64.u32 	%rd3, %r47;

LBB53_4:
	@%p3 bra 	LBB53_16;

	mul.wide.u32 	%rd8, %r48, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	shl.b64 	%rd12, %rd3, 2;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	mul.lo.s32 	%r8, %r48, %r22;
	@%p4 bra 	LBB53_12;

	@%p5 bra 	LBB53_10;

	@%p6 bra 	LBB53_14;

	add.s32 	%r49, %r2, %r8;
	mov.u32 	%r50, %r2;

LBB53_9:
	mul.wide.u32 	%rd14, %r50, 8;
	add.s64 	%rd15, %rd2, %rd14;
	ld.global.nc.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd19, %rd17, %rd12;
	ld.global.f32 	%f2, [%rd19];
	sub.ftz.f32 	%f3, %f1, %f2;
	cvt.ftz.f64.f32 	%fd1, %f3;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64 	%f4, %fd2;
	mul.wide.u32 	%rd20, %r49, 4;
	add.s64 	%rd21, %rd1, %rd20;
	atom.global.add.f32 	%f5, [%rd21], %f4;
	add.s32 	%r49, %r49, %r4;
	add.s32 	%r50, %r50, %r4;
	setp.lt.u32 	%p7, %r50, %r22;
	@%p7 bra 	LBB53_9;
	bra.uni 	LBB53_16;

LBB53_10:
	mov.u32 	%r51, %r2;

LBB53_11:
	mul.wide.u32 	%rd22, %r51, 8;
	add.s64 	%rd23, %rd2, %rd22;
	ld.global.nc.u64 	%rd24, [%rd23];
	cvta.to.global.u64 	%rd25, %rd24;
	add.s64 	%rd27, %rd25, %rd12;
	ld.global.f32 	%f6, [%rd27];
	mul.ftz.f32 	%f7, %f1, %f6;
	add.s32 	%r42, %r51, %r8;
	mul.wide.u32 	%rd28, %r42, 4;
	add.s64 	%rd29, %rd1, %rd28;
	atom.global.add.f32 	%f8, [%rd29], %f7;
	add.s32 	%r51, %r51, %r4;
	setp.lt.u32 	%p8, %r51, %r22;
	@%p8 bra 	LBB53_11;
	bra.uni 	LBB53_16;

LBB53_12:
	mov.u32 	%r52, %r2;

LBB53_13:
	mul.wide.u32 	%rd30, %r52, 8;
	add.s64 	%rd31, %rd2, %rd30;
	ld.global.nc.u64 	%rd32, [%rd31];
	cvta.to.global.u64 	%rd33, %rd32;
	add.s64 	%rd35, %rd33, %rd12;
	ld.global.f32 	%f9, [%rd35];
	sub.ftz.f32 	%f10, %f1, %f9;
	mul.ftz.f32 	%f11, %f10, %f10;
	add.s32 	%r43, %r52, %r8;
	mul.wide.u32 	%rd36, %r43, 4;
	add.s64 	%rd37, %rd1, %rd36;
	atom.global.add.f32 	%f12, [%rd37], %f11;
	add.s32 	%r52, %r52, %r4;
	setp.lt.u32 	%p9, %r52, %r22;
	@%p9 bra 	LBB53_13;
	bra.uni 	LBB53_16;

LBB53_14:
	mov.u32 	%r53, %r2;

LBB53_15:
	add.s32 	%r44, %r53, %r8;
	mul.wide.u32 	%rd38, %r44, 4;
	add.s64 	%rd39, %rd1, %rd38;
	atom.global.add.f32 	%f13, [%rd39], 0f00000000;
	add.s32 	%r53, %r53, %r4;
	setp.lt.u32 	%p10, %r53, %r22;
	@%p10 bra 	LBB53_15;

LBB53_16:
	add.s32 	%r48, %r48, %r3;
	setp.lt.u32 	%p11, %r48, %r23;
	@%p11 bra 	LBB53_4;

LBB53_17:
	mov.u32 	%r46, %nctaid.x;
	mad.lo.s32 	%r47, %r27, %r46, %r47;
	setp.lt.u32 	%p12, %r47, %r24;
	@%p12 bra 	LBB53_2;

LBB53_18:
	ret;

}
	// .globl	MultiCosineDistance
.visible .entry MultiCosineDistance(
	.param .u64 MultiCosineDistance_param_0,
	.param .u64 MultiCosineDistance_param_1,
	.param .u64 MultiCosineDistance_param_2,
	.param .u64 MultiCosineDistance_param_3,
	.param .u64 MultiCosineDistance_param_4,
	.param .u32 MultiCosineDistance_param_5,
	.param .u32 MultiCosineDistance_param_6,
	.param .u32 MultiCosineDistance_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<27>;


	ld.param.u64 	%rd2, [MultiCosineDistance_param_0];
	ld.param.u64 	%rd3, [MultiCosineDistance_param_1];
	ld.param.u64 	%rd4, [MultiCosineDistance_param_2];
	ld.param.u64 	%rd5, [MultiCosineDistance_param_3];
	ld.param.u64 	%rd6, [MultiCosineDistance_param_4];
	ld.param.u32 	%r15, [MultiCosineDistance_param_5];
	ld.param.u32 	%r16, [MultiCosineDistance_param_6];
	ld.param.u32 	%r17, [MultiCosineDistance_param_7];
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %ntid.x;
	mov.u32 	%r20, %tid.x;
	mad.lo.s32 	%r36, %r19, %r18, %r20;
	setp.ge.u32 	%p1, %r36, %r17;
	@%p1 bra 	LBB54_8;

	mov.u32 	%r21, %ntid.y;
	mov.u32 	%r22, %ctaid.z;
	mov.u32 	%r23, %ntid.z;
	mov.u32 	%r24, %tid.z;
	mad.lo.s32 	%r2, %r23, %r22, %r24;
	mov.u32 	%r25, %nctaid.y;
	mul.lo.s32 	%r3, %r21, %r25;
	mov.u32 	%r26, %nctaid.z;
	mul.lo.s32 	%r4, %r23, %r26;
	cvta.to.global.u64 	%rd1, %rd3;
	setp.ge.u32 	%p3, %r2, %r15;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd20, %rd4;
	cvta.to.global.u64 	%rd23, %rd5;
	cvta.to.global.u64 	%rd25, %rd6;

LBB54_2:
	mov.u32 	%r27, %ctaid.y;
	mov.u32 	%r29, %tid.y;
	mad.lo.s32 	%r37, %r21, %r27, %r29;
	setp.ge.u32 	%p2, %r37, %r16;
	@%p2 bra 	LBB54_7;

LBB54_3:
	@%p3 bra 	LBB54_6;

	mul.wide.u32 	%rd8, %r37, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	mul.wide.u32 	%rd12, %r36, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	mul.ftz.f32 	%f2, %f1, %f1;
	mad.lo.s32 	%r38, %r37, %r15, %r2;
	mov.u32 	%r39, %r2;

LBB54_5:
	mul.wide.u32 	%rd14, %r39, 8;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.nc.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd19, %rd17, %rd12;
	ld.global.f32 	%f3, [%rd19];
	mul.wide.u32 	%rd21, %r38, 4;
	add.s64 	%rd22, %rd20, %rd21;
	atom.global.add.f32 	%f4, [%rd22], %f2;
	add.s64 	%rd24, %rd23, %rd21;
	mul.ftz.f32 	%f5, %f1, %f3;
	atom.global.add.f32 	%f6, [%rd24], %f5;
	add.s64 	%rd26, %rd25, %rd21;
	mul.ftz.f32 	%f7, %f3, %f3;
	atom.global.add.f32 	%f8, [%rd26], %f7;
	add.s32 	%r38, %r38, %r4;
	add.s32 	%r39, %r39, %r4;
	setp.lt.u32 	%p4, %r39, %r15;
	@%p4 bra 	LBB54_5;

LBB54_6:
	add.s32 	%r37, %r37, %r3;
	setp.lt.u32 	%p5, %r37, %r16;
	@%p5 bra 	LBB54_3;

LBB54_7:
	mov.u32 	%r35, %nctaid.x;
	mad.lo.s32 	%r36, %r19, %r35, %r36;
	setp.lt.u32 	%p6, %r36, %r17;
	@%p6 bra 	LBB54_2;

LBB54_8:
	ret;

}

