<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using BrightData.Buffer.ReadOnly.Converter;
using BrightData.Types;
using BrightData.LinearAlgebra.ReadOnly;
using BrightData.Analysis;
using BrightData.Buffer.Operations;
using System.Collections.Generic;
using BrightData.Buffer.Operations.Conversion;

namespace BrightData.Helper
{
    internal class GenericTypeMapping
    {
        internal static IReadOnlyBuffer<string> ToStringConverter(Type type, IReadOnlyBuffer buffer)
        {
<#= WriteSingleTypeMapping("ToStringConverter", x => $"(IReadOnlyBuffer<{x}>)buffer") #>
        }

        internal static IDataAnalyser ConvertToStringFrequencyAnalysis(Type type, uint writeCount)
        {
<#= WriteSingleTypeMapping("ConvertToStringFrequencyAnalysis", x => $"writeCount") #>
        }

        internal static IOperation IndexedCopyOperation(Type type, IReadOnlyBufferWithMetaData from, ICompositeBuffer to, IEnumerable<uint> indices)
        {
<#= WriteSingleTypeMapping("IndexedCopyOperation", x => $"(IReadOnlyBufferWithMetaData<{x}>)from, (IAppendToBuffer<{x}>)to, indices") #>
        }

        internal static IReadOnlyBuffer<object> ToObjectConverter(Type type, IReadOnlyBuffer from)
        {
<#= WriteSingleTypeMapping("ToObjectConverter", x => $"(IReadOnlyBuffer<{x}>)from") #>
        }

        internal static IReadOnlyBuffer CastConverter(Type type1, Type type2, IReadOnlyBuffer from)
        {
<#= WriteDoubleTypeMapping("CastConverter", (x, y) => $"(IReadOnlyBuffer<{x}>)from") #>
        }

        internal static IReadOnlyBuffer TypeConverter(Type type1, Type type2, IReadOnlyBuffer from, ICanConvert converter) 
        {
<#= WriteDoubleTypeMapping("TypeConverter", (x, y) => $"(IReadOnlyBuffer<{x}>)from, (ICanConvert<{x}, {y}>)converter") #>
        }
    }
}

<#+
    IEnumerable<(string TypeCode, string TypeName)> ValidTypeCodes
    {
        get {
            yield return ("Boolean", "bool");
            //yield return ("Byte", "byte");
            //yield return ("Char", "char");
            yield return ("SByte", "sbyte");
            yield return ("Single", "float");
            yield return ("Double", "double");
            yield return ("Decimal", "decimal");
            yield return ("String", "string");
            yield return ("Int16", "short");
            yield return ("Int32", "int");
            yield return ("Int64", "long");
            yield return ("DateTime", "DateTime");
            //yield return ("UInt16", "ushort");
            //yield return ("UInt32", "uint");
            //yield return ("UInt64", "ulong");
        }
    }
    IEnumerable<string> ValidTypes
    {
        get {
            yield return "IndexList";
            yield return "WeightedIndexList";
            yield return "ReadOnlyVector";
            yield return "ReadOnlyMatrix";
            yield return "ReadOnlyTensor3D";
            yield return "ReadOnlyTensor4D";
            yield return "TimeOnly";
            yield return "DateOnly";
        }
    }
    IEnumerable<string> AllValidTypes
    {
        get {
            yield return "bool";
            yield return "sbyte";
            yield return "float";
            yield return "double";
            yield return "decimal";
            yield return "string";
            yield return "short";
            yield return "int";
            yield return "long";
            yield return "IndexList";
            yield return "WeightedIndexList";
            yield return "ReadOnlyVector";
            yield return "ReadOnlyMatrix";
            yield return "ReadOnlyTensor3D";
            yield return "ReadOnlyTensor4D";
            yield return "TimeOnly";
            yield return "DateOnly";
        }
    }

    string WriteSingleTypeMapping(string typeName, Func<string, string> parameters)
    {
        var sb = new StringBuilder();

        // write the type codes
        sb.AppendLine("\t\t\tvar typeCode = Type.GetTypeCode(type);");
        foreach(var item in ValidTypeCodes) {
            sb.AppendLine($"\t\t\tif(typeCode == TypeCode.{item.TypeCode})");
            sb.AppendLine($"\t\t\t\treturn new {typeName}<{item.TypeName}>({parameters(item.TypeName)});");
        }

        // write the types
        foreach(var item in ValidTypes) {
            sb.AppendLine($"\t\t\tif(type == typeof({item}))");
            sb.AppendLine($"\t\t\t\treturn new {typeName}<{item}>({parameters(item)});");
        }

        var msg = $"Could not create {typeName} for type {{type}}";
        sb.AppendLine($"\t\t\tthrow new NotImplementedException($\"{msg}\");");
        return sb.ToString();
    }

    string WriteDoubleTypeMapping(string typeName, Func<string, string, string> parameters)
    {
        var sb = new StringBuilder();

        // write the types
        foreach(var item1 in AllValidTypes) {
            foreach(var item2 in AllValidTypes) {
                sb.AppendLine($"\t\t\tif(type1 == typeof({item1}) && type2 == typeof({item2}))");
                sb.AppendLine($"\t\t\t\treturn new {typeName}<{item1}, {item2}>({parameters(item1, item2)});");
            }
        }

        var msg = $"Could not create {typeName} for types {{type1}} and {{type2}}";
        sb.AppendLine($"\t\t\tthrow new NotImplementedException($\"{msg}\");");
        return sb.ToString();
    }
#>