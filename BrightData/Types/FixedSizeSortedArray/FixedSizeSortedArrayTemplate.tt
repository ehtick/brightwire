<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using BrightData.Types.Helper;
using System.Linq;

namespace BrightData.Types
{
<# for(var i = 1; i <= 32; i++) { #>
    /// <summary>
    /// Fixed size sorted array of values and weights (max <#= i #> elements)
    /// that is sorted in ascending order based on each weight
    /// </summary>
    /// <typeparam name="V">Type of value to store</typeparam>
    /// <typeparam name="W">Type of weight that will be used to sort</typeparam>
    public record struct FixedSizeSortedAscending<#= i #>Array<V, W>() : IFixedSizeSortedArray<V, W>
        where V : IComparable<V>
        where W : unmanaged, INumber<W>, IMinMaxValue<W>
    {
        /// <summary>
        /// Max size of the array
        /// </summary>
        public const int MaxSize = <#= i #>;
        byte IFixedSizeSortedArray<V, W>.MaxSize => MaxSize;

        [InlineArray(MaxSize)]
        internal struct ValueArray
        {
            public V _element0;
        }
        [InlineArray(MaxSize)]
        internal struct WeightArray
        {
            public W _element0;
        }
        ValueArray _values = new();
        WeightArray _weights = new();
        byte _size = 0;

        /// <summary>
        /// Current number of elements
        /// </summary>
        public byte Size => _size;

        /// <summary>
        /// Sorted list of values
        /// </summary>
        public ReadOnlySpan<V> Values => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), _size);

        /// <summary>
        /// Sorted list of weights
        /// </summary>
        public ReadOnlySpan<W> Weights => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), _size);

        /// <summary>
        /// The smallest weight
        /// </summary>
        public W MinWeight => _size > 0 ? Weights[0] : W.MaxValue;

        /// <summary>
        /// The largest weight
        /// </summary>
        public W MaxWeight => _size > 0 ? Weights[_size - 1] : W.MinValue;

        /// <summary>
        /// The value with the smallest weight
        /// </summary>
        public V? MinValue => _size > 0 ? Values[0] : default;

        /// <summary>
        /// The value with the largest weight
        /// </summary>
        public V? MaxValue => _size > 0 ? Values[_size - 1] : default;

        /// <summary>
        /// Returns a value and weight
        /// </summary>
        /// <param name="index">Index to return</param>
        public (V Value, W Weight) this[uint index]
        {
            get
            {
                if (index < Size)
                    return (Values[(int)index], Weights[(int)index]);
                throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        /// <summary>
        /// Enumerates the values and weights
        /// </summary>
        public IEnumerable<(V Value, W Weight)> Elements
        {
            get
            {
                for (byte i = 0; i < Size; i++)
                    yield return this[i];
            }
        }

        /// <summary>
        /// Tries to add a new element - will succeed if there aren't already max elements with a smaller weight
        /// </summary>
        /// <param name="value">Value to add</param>
        /// <param name="weight">Weight to add</param>
        /// <param name="enforceUnique">True if elements should be unique - will return false if the value and weight already exists</param>
        /// <returns>True if the element was added</returns>
        public bool TryAdd(V value, W weight, bool enforceUnique = true)
        {
            var values = MemoryMarshal.CreateSpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), MaxSize);
            var weights = MemoryMarshal.CreateSpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), MaxSize);
            var ret = SortedArrayHelper.InsertIntoAscending(enforceUnique, _size, MaxSize, value, weight, values, weights);
            if(ret && _size < MaxSize)
                ++_size;
            return ret;
        }

        /// <summary>
        /// Removes an element from the array
        /// </summary>
        /// <param name="index">Index of element to remove</param>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        public V RemoveAt(byte index)
        {
            if(index >= _size)
                throw new ArgumentOutOfRangeException(nameof(index));
            var values = MemoryMarshal.CreateSpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), _size);
            var weights = MemoryMarshal.CreateSpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), _size);
            var ret = values[index];
            SortedArrayHelper.RemoveAt(index, values, weights);
            --_size;
            return ret;
        }

        /// <inheritdoc />
        public override string ToString() => string.Join(", ", Elements.Select(x => $"{x.Value}|{x.Weight}"));
    }

    /// <summary>
    /// Fixed size sorted array of values and weights (max <#= i #> elements)
    /// that is sorted in descending order based on each weight
    /// </summary>
    /// <typeparam name="V">Type of value to store</typeparam>
    /// <typeparam name="W">Type of weight that will be used to sort</typeparam>
    public record struct FixedSizeSortedDescending<#= i #>Array<V, W>() : IFixedSizeSortedArray<V, W>
        where V : IComparable<V>
        where W : unmanaged, INumber<W>, IMinMaxValue<W>
    {
        /// <summary>
        /// Max size of the array
        /// </summary>
        public const int MaxSize = <#= i #>;
        byte IFixedSizeSortedArray<V, W>.MaxSize => MaxSize;

        [InlineArray(MaxSize)]
        internal struct ValueArray
        {
            public V _element0;
        }
        [InlineArray(MaxSize)]
        internal struct WeightArray
        {
            public W _element0;
        }
        ValueArray _values = new();
        WeightArray _weights = new();
        byte _size = 0;

        /// <summary>
        /// Current number of elements
        /// </summary>
        public byte Size => _size;

        /// <summary>
        /// Sorted list of values
        /// </summary>
        public ReadOnlySpan<V> Values => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), _size);

        /// <summary>
        /// Sorted list of weights
        /// </summary>
        public ReadOnlySpan<W> Weights => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), _size);

        /// <summary>
        /// The smallest weight
        /// </summary>
        public W MinWeight => _size > 0 ? Weights[_size - 1] : W.MaxValue;

        /// <summary>
        /// The largest weight
        /// </summary>
        public W MaxWeight => _size > 0 ? Weights[0] : W.MinValue;

        /// <summary>
        /// The value with the smallest weight
        /// </summary>
        public V? MinValue => _size > 0 ? Values[_size - 1] : default;

        /// <summary>
        /// The value with the largest weight
        /// </summary>
        public V? MaxValue => _size > 0 ? Values[0] : default;

        /// <summary>
        /// Returns a value and weight
        /// </summary>
        /// <param name="index">Index to return</param>
        public (V Value, W Weight) this[uint index]
        {
            get
            {
                if (index < Size)
                    return (Values[(int)index], Weights[(int)index]);
                throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        /// <summary>
        /// Enumerates the values and weights
        /// </summary>
        public IEnumerable<(V Value, W Weight)> Elements
        {
            get
            {
                for (byte i = 0; i < Size; i++)
                    yield return this[i];
            }
        }

        /// <summary>
        /// Tries to add a new element - will succeed if there aren't already max elements with a higher weight
        /// </summary>
        /// <param name="value">Value to add</param>
        /// <param name="weight">Weight to add</param>
        /// <param name="enforceUnique">True if elements should be unique - will return false if the value and weight already exists</param>
        /// <returns>True if the element was added</returns>
        public bool TryAdd(V value, W weight, bool enforceUnique = true)
        {
            var values = MemoryMarshal.CreateSpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), MaxSize);
            var weights = MemoryMarshal.CreateSpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), MaxSize);
            var ret = SortedArrayHelper.InsertIntoDescending(enforceUnique, _size, MaxSize, value, weight, values, weights);
            if(ret && _size < MaxSize)
                ++_size;
            return ret;
        }

        /// <summary>
        /// Removes an element from the array
        /// </summary>
        /// <param name="index">Index of element to remove</param>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        public V RemoveAt(byte index)
        {
            if(index >= _size)
                throw new ArgumentOutOfRangeException();
            var values = MemoryMarshal.CreateSpan(ref Unsafe.As<ValueArray, V>(ref Unsafe.AsRef(ref _values)), _size);
            var weights = MemoryMarshal.CreateSpan(ref Unsafe.As<WeightArray, W>(ref Unsafe.AsRef(ref _weights)), _size);
            var ret = values[index];
            SortedArrayHelper.RemoveAt(index, values, weights);
            --_size;
            return ret;
        }

        public override string ToString() => string.Join(", ", Elements.Select(x => $"{x.Value}|{x.Weight}"));
    }

<# } #>
}