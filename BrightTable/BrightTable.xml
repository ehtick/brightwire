<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BrightTable</name>
    </assembly>
    <members>
        <member name="T:BrightTable.Buffers.InMemoryBuffer`1">
            <summary>
            Buffer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BrightTable.Builders.InMemoryTableBuilder">
            <summary>
            Builds tables dynamically in memory
            </summary>
        </member>
        <member name="P:BrightTable.Builders.InMemoryTableBuilder.Context">
            <inheritdoc />
        </member>
        <member name="M:BrightTable.Builders.InMemoryTableBuilder.CopyColumnsFrom(BrightTable.IDataTable,System.UInt32[])">
            <summary>
            Copies column definitions from an existing table
            </summary>
            <param name="table">Table to copy from</param>
            <param name="columnIndices">Column indices to copy</param>
        </member>
        <member name="M:BrightTable.Builders.InMemoryTableBuilder.AddColumn(BrightTable.ColumnType,System.String)">
            <summary>
            Adds a new column
            </summary>
            <param name="type">Type of the column</param>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Builders.InMemoryTableBuilder.AddRow(System.Object[])">
            <summary>
            Adds a new row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:BrightTable.Builders.InMemoryTableBuilder.BuildRowOriented">
            <summary>
            Creates a row oriented table
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Builders.InMemoryTableBuilder.BuildColumnOriented">
            <summary>
            Creates a column oriented table
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrightTable.ExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:BrightTable.ExtensionMethods.GetDataType(BrightTable.ColumnType)">
            <summary>
            Converts from a column type to a Type
            </summary>
            <param name="type">Column type</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.GetColumnType(System.Type)">
            <summary>
            Converts from a Type to a ColumnType
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.RowIndices(BrightTable.IDataTable)">
            <summary>
            Returns all row indices as an enumerable
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ColumnIndices(BrightTable.IDataTable)">
            <summary>
            Returns all column indices as an enumerable
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.AllMetaData(BrightTable.IDataTable)">
            <summary>
            Returns all meta data as an enumerable
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ForEachRow(BrightTable.IDataTable,System.Action{System.Object[]})">
            <summary>
            Invokes a callback on each row of a data table
            </summary>
            <param name="dataTable"></param>
            <param name="callback"></param>
        </member>
        <member name="M:BrightTable.ExtensionMethods.GetColumnAnalyser(BrightTable.ColumnType,BrightData.IMetaData,System.UInt32,System.UInt32)">
            <summary>
            Creates a column analyser
            </summary>
            <param name="type">Column type</param>
            <param name="metaData">Column meta data</param>
            <param name="writeCount">Maximum size of sequences to write in final meta data</param>
            <param name="maxCount">Maximum number of distinct items to track</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.Analyse(BrightTable.ISingleTypeTableSegment,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Returns the analysis for a column
            </summary>
            <param name="segment">Column to analyse</param>
            <param name="force">True to refresh analysis (if cached)</param>
            <param name="writeCount">Maximum size of sequences to write in final meta data</param>
            <param name="maxCount">Maximum number of distinct items to track</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.GetColumnAnalysis(BrightTable.IDataTable,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Returns analysis for each column in the table
            </summary>
            <param name="table">Data table to analyse</param>
            <param name="force">True to refresh analysis (if cached)</param>
            <param name="writeCount">Maximum size of sequences to write in final meta data</param>
            <param name="maxCount">Maximum number of distinct items to track</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ParseCsv(BrightData.IBrightDataContext,System.IO.StreamReader,System.Boolean,System.Char,System.String,System.UInt32,System.UInt16,System.Boolean,System.String)">
            <summary>
            Parse CSV into a column oriented data table
            </summary>
            <param name="context">Bright data context</param>
            <param name="reader">CSV</param>
            <param name="hasHeader">True if the CSV has a text based header</param>
            <param name="delimiter">CSV delimiter</param>
            <param name="fileOutputPath">Optional path to save final table</param>
            <param name="inMemoryRowCount">Number of rows to cache in memory</param>
            <param name="maxDistinct">Maximum number of distinct items to track</param>
            <param name="writeProgress"></param>
            <param name="tempBasePath"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ConvertToTable(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.String,BrightData.IndexList}},BrightData.IBrightDataContext)">
            <summary>
            Converts indexed classifications to a data table
            </summary>
            <param name="data"></param>
            <param name="context"></param>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ConvertToTable(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.String,BrightData.WeightedIndexList}},BrightData.IBrightDataContext)">
            <summary>
            Converts weighted index classifications to a data table
            </summary>
            <param name="data"></param>
            <param name="context"></param>
        </member>
        <member name="M:BrightTable.ExtensionMethods.ConvertToTable(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.String,BrightData.Vector{System.Single}}},System.Boolean,BrightData.IBrightDataContext)">
            <summary>
            Converts the vector classifications into a data table
            </summary>
            <param name="data"></param>
            <param name="preserveVectors">True to create a data table with a vector column type, false to to convert to columns of floats</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.ExtensionMethods.Vectorise(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.String,BrightData.WeightedIndexList}},BrightData.IBrightDataContext)">
            <summary>
            Converts the weighted index classification list to a list of dense vectors
            </summary>
            <param name="data"></param>
            <param name="context"></param>
        </member>
        <member name="T:BrightTable.Helper.ColumnTypeClassifier">
            <summary>
            Classifies data table column types
            </summary>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.IsDecimal(BrightTable.ColumnType)">
            <summary>
            Checks for a decimal type (floating point)
            </summary>
            <param name="columnType">Column type to check</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.IsNumeric(BrightTable.ColumnType)">
            <summary>
            Checks for a numeric type (floating point or integer)
            </summary>
            <param name="columnType">Column type to check</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.IsContinuous(BrightTable.ColumnType)">
            <summary>
            Checks for a continuous type (non categorical)
            </summary>
            <param name="columnType">Column type to check</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.IsCategorical(BrightTable.ColumnType)">
            <summary>
            Checks for a categorical type (non continuous)
            </summary>
            <param name="columnType">Column type to check</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.IsBlittable(BrightTable.ColumnType)">
            <summary>
            Checks if the type has an independent memory layout across managed and unmanaged code
            </summary>
            <param name="columnType">Column type to check</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Helper.ColumnTypeClassifier.GetClass(BrightTable.ColumnType,BrightData.IMetaData)">
            <summary>
            Returns the set of possible column classifications
            </summary>
            <param name="type">Column type to check</param>
            <param name="metaData">Column metadata</param>
            <returns></returns>
        </member>
        <member name="T:BrightTable.DataTableOrientation">
            <summary>
            Determines if the data table is oriented as either rows or columns
            </summary>
        </member>
        <member name="F:BrightTable.DataTableOrientation.Unknown">
            <summary>
            Pathological case
            </summary>
        </member>
        <member name="F:BrightTable.DataTableOrientation.RowOriented">
            <summary>
            Data table is a series of rows, optimised for per-row processing
            </summary>
        </member>
        <member name="F:BrightTable.DataTableOrientation.ColumnOriented">
            <summary>
            Data table is a series of columns, optimised for column based processing
            </summary>
        </member>
        <member name="T:BrightTable.ColumnType">
            <summary>
            Segment table column type
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Unknown">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Boolean">
            <summary>
            Boolean values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Byte">
            <summary>
            Byte values (-128 to 128)
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Short">
            <summary>
            Short values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Int">
            <summary>
            Integer values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Long">
            <summary>
            Long values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Float">
            <summary>
            Float values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Double">
            <summary>
            Double values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Decimal">
            <summary>
            Decimal values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.String">
            <summary>
            String values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Date">
            <summary>
            Date values
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.IndexList">
            <summary>
            List of indices
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.WeightedIndexList">
            <summary>
            Weighted list of indices
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Vector">
            <summary>
            Vector of floats
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Matrix">
            <summary>
            Matrix of floats
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Tensor3D">
            <summary>
            3D tensor of floats
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.Tensor4D">
            <summary>
            4D tensor of floats
            </summary>
        </member>
        <member name="F:BrightTable.ColumnType.BinaryData">
            <summary>
            Binary data
            </summary>
        </member>
        <member name="T:BrightTable.ColumnClass">
            <summary>
            Column classifications
            </summary>
        </member>
        <member name="T:BrightTable.ISingleTypeTableSegment">
            <summary>
            A segment (series of values) in a table of which each element has the same type
            </summary>
        </member>
        <member name="P:BrightTable.ISingleTypeTableSegment.SingleType">
            <summary>
            The single type of the segment
            </summary>
        </member>
        <member name="M:BrightTable.ISingleTypeTableSegment.Enumerate">
            <summary>
            Enumerate each item (casting to object)
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrightTable.ISingleTypeTableSegment.Size">
            <summary>
            Number of values (size of segment)
            </summary>
        </member>
        <member name="T:BrightTable.IDataTableSegment">
            <summary>
            A series of values from a data table
            </summary>
        </member>
        <member name="P:BrightTable.IDataTableSegment.Size">
            <summary>
            Number of values (size of segment)
            </summary>
        </member>
        <member name="P:BrightTable.IDataTableSegment.Types">
            <summary>
            The column type of each value
            </summary>
        </member>
        <member name="P:BrightTable.IDataTableSegment.Item(System.UInt32)">
            <summary>
            The value at each index (cast to object)
            </summary>
            <param name="index">Index to retrieve</param>
        </member>
        <member name="T:BrightTable.IDataTableSegment`1">
            <summary>
            Typed data table segment (all of the same type)
            </summary>
            <typeparam name="T">Data type of values within the segment</typeparam>
        </member>
        <member name="M:BrightTable.IDataTableSegment`1.EnumerateTyped">
            <summary>
            Enumerates the values
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrightTable.IDataTable">
            <summary>
            A data table is an immutable collection of data with columns and rows (in which the columns have the same type of data)
            </summary>
        </member>
        <member name="P:BrightTable.IDataTable.RowCount">
            <summary>
            Number of rows
            </summary>
        </member>
        <member name="P:BrightTable.IDataTable.ColumnCount">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="P:BrightTable.IDataTable.ColumnTypes">
            <summary>
            The type of each column
            </summary>
        </member>
        <member name="P:BrightTable.IDataTable.Orientation">
            <summary>
            How the table is aligned (either row or column)
            </summary>
        </member>
        <member name="M:BrightTable.IDataTable.ColumnMetaData(System.UInt32[])">
            <summary>
            Enumerates metadata for each column
            </summary>
            <param name="columnIndices">Column indices to retrieve</param>
        </member>
        <member name="M:BrightTable.IDataTable.ForEachRow(System.Action{System.Object[],System.UInt32},System.UInt32)">
            <summary>
            Invokes the callback on each row of the data table
            </summary>
            <param name="callback">Callback for each row</param>
            <param name="maxRows">Maximum number of rows to process</param>
        </member>
        <member name="M:BrightTable.IDataTable.ForEachRow(System.Action{System.Object[]},System.UInt32)">
            <summary>
            Invokes the callback on each row of the data table
            </summary>
            <param name="callback">Callback for each row</param>
            <param name="maxRows">Maximum number of rows to process</param>
        </member>
        <member name="M:BrightTable.IDataTable.Columns(System.UInt32[])">
            <summary>
            Enumerates the columns of the data table
            </summary>
            <param name="columnIndices">Column indices to retrieve</param>
        </member>
        <member name="M:BrightTable.IDataTable.ReadTyped(BrightTable.IConsumeColumnData[],System.UInt32)">
            <summary>
            Consumes data in the table via an array of consumers, which will each consume data for each row in the table
            </summary>
            <param name="consumers">Array of consumers, for each column in the table</param>
            <param name="maxRows">Maximum number of rows to process</param>
        </member>
        <member name="M:BrightTable.IDataTable.Column(System.UInt32)">
            <summary>
            Returns a single column from the table
            </summary>
            <param name="columnIndex">Column index to retrieve</param>
        </member>
        <member name="M:BrightTable.IDataTable.Project(System.Func{System.Object[],System.Object[]},System.String)">
            <summary>
            Applies a projection function to each row of this data table
            </summary>
            <param name="projector">Mutates the rows of each row by changing values, types, or both</param>
            <param name="filePath">File path to store new table on disk (optional)</param>
        </member>
        <member name="T:BrightTable.IColumnOrientedDataTable">
            <summary>
            Column oriented data table
            </summary>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.AsRowOriented(System.String)">
            <summary>
            Converts to a row oriented data table
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.Convert(BrightTable.IColumnTransformationParam[])">
            <summary>
            Creates a new table with columns that have been converted
            </summary>
            <param name="conversion">Column conversion parameters</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.Convert(System.String,BrightTable.IColumnTransformationParam[])">
            <summary>
            Creates a new table with columns that have been converted
            </summary>
            <param name="filePath">File path to store new table on disk</param>
            <param name="conversion">Column conversion parameters</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.Normalize(BrightData.NormalizationType,System.String)">
            <summary>
            Normalizes the data in all columns of the table
            </summary>
            <param name="type">Normalization type</param>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.Normalize(BrightTable.IColumnTransformationParam[])">
            <summary>
            Normalizes the data in all columns of the table
            </summary>
            <param name="conversion">Column normalization parameters</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.Normalize(System.String,BrightTable.IColumnTransformationParam[])">
            <summary>
            Normalizes the data in all columns of the table
            </summary>
            <param name="filePath">File path to store new table on disk</param>
            <param name="conversion">Column normalization parameters</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.CopyColumns(System.UInt32[])">
            <summary>
            Copies the selected columns to a new data table
            </summary>
            <param name="columnIndices">Column indices to copy</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.CopyColumns(System.String,System.UInt32[])">
            <summary>
            Copies the selected columns to a new data table
            </summary>
            <param name="filePath">File path to store new table on disk</param>
            <param name="columnIndices">Column indices to copy</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.ConcatColumns(BrightTable.IColumnOrientedDataTable[])">
            <summary>
            Creates a new data table with this concatenated with other column oriented data tables
            </summary>
            <param name="others">Other tables to concatenate</param>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.ConcatColumns(System.String,BrightTable.IColumnOrientedDataTable[])">
            <summary>
            Creates a new data table with this concatenated with other column oriented data tables
            </summary>
            <param name="filePath">File path to store new table on disk</param>
            <param name="others">Other tables to concatenate</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.FilterRows(System.Predicate{System.Object[]},System.String)">
            <summary>
            Creates a new data table of the rows that match the predicate
            </summary>
            <param name="predicate">Predicate function to evaluate which rows to include in the new table</param>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.ReinterpretColumns(BrightTable.IReinterpretColumnsParam[])">
            <summary>
            Many to one or one to many style column transformations
            </summary>
            <param name="columns">Parameters to determine which columns are reinterpreted</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IColumnOrientedDataTable.ReinterpretColumns(System.String,BrightTable.IReinterpretColumnsParam[])">
            <summary>
            Many to one or one to many style column transformations
            </summary>
            <param name="filePath">File path to store new table on disk</param>
            <param name="columns">Parameters to determine which columns are reinterpreted</param>
            <returns></returns>
        </member>
        <member name="T:BrightTable.IRowOrientedDataTable">
            <summary>
            Row oriented data table
            </summary>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.AsColumnOriented(System.String)">
            <summary>
            Converts to a column oriented data table
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.ForEachRow(System.Collections.Generic.IEnumerable{System.UInt32},System.Action{System.Object[]})">
            <summary>
            Invokes the callback on each specified row of the table
            </summary>
            <param name="rowIndices">Row indices to select</param>
            <param name="callback">Callback to invoke on each selected row</param>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Bag(System.UInt32,System.String)">
            <summary>
            Samples (with replacement) from the data table
            </summary>
            <param name="sampleCount">Number of rows to sample</param>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Row(System.UInt32)">
            <summary>
            Returns the row at the specified index
            </summary>
            <param name="rowIndex">Row index to retrieve</param>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Rows(System.UInt32[])">
            <summary>
            Returns the rows at the specified indices
            </summary>
            <param name="rowIndices">Row indices to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Concat(BrightTable.IRowOrientedDataTable[])">
            <summary>
            Creates a new table of this concatenated with other row oriented data tables
            </summary>
            <param name="others">Other row oriented data tables to concatenate</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Concat(System.String,BrightTable.IRowOrientedDataTable[])">
            <summary>
            Creates a new table of this concatenated with other row oriented data tables
            </summary>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <param name="others">Other row oriented data tables to concatenate</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.CopyRows(System.UInt32[])">
            <summary>
            Copy specified rows from this to a new data table
            </summary>
            <param name="rowIndices">Row indices to copy</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.CopyRows(System.String,System.UInt32[])">
            <summary>
            Copy specified rows from this to a new data table
            </summary>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <param name="rowIndices">Row indices to copy</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Shuffle(System.String)">
            <summary>
            Creates a new data table from the randomly shuffled rows of this data table
            </summary>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.Sort(System.UInt32,System.Boolean,System.String)">
            <summary>
            Creates a new sorted data table
            </summary>
            <param name="columnIndex">Column index to sort</param>
            <param name="ascending">True to sort ascending</param>
            <param name="filePath">File path to store new table on disk (optional)</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IRowOrientedDataTable.GroupBy(System.UInt32)">
            <summary>
            Splits this table into many data tables based on the value from a column
            </summary>
            <param name="columnIndex">Column index to group on</param>
            <returns></returns>
        </member>
        <member name="P:BrightTable.IRowOrientedDataTable.FirstRow">
            <summary>
            Returns the first row as a string
            </summary>
        </member>
        <member name="P:BrightTable.IRowOrientedDataTable.SecondRow">
            <summary>
            Returns the second row as a string
            </summary>
        </member>
        <member name="P:BrightTable.IRowOrientedDataTable.ThirdRow">
            <summary>
            Returns the third row as a string
            </summary>
        </member>
        <member name="P:BrightTable.IRowOrientedDataTable.LastRow">
            <summary>
            Returns the last row as a string
            </summary>
        </member>
        <member name="T:BrightTable.ColumnConversionType">
            <summary>
            Single column conversion options
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.Unchanged">
            <summary>
            Leave the column unchanged (nop)
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToBoolean">
            <summary>
            Convert to boolean
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToDate">
            <summary>
            Convert to date
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToNumeric">
            <summary>
            Convert to numeric (best numeric size will be automatically determined)
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToString">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToIndexList">
            <summary>
            Convert to index list
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToWeightedIndexList">
            <summary>
            Convert to weighted index list
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToVector">
            <summary>
            Convert to vector
            </summary>
        </member>
        <member name="F:BrightTable.ColumnConversionType.ToCategoricalIndex">
            <summary>
            Convert each value to an index within a dictionary
            </summary>
        </member>
        <member name="T:BrightTable.ITransformColumn">
            <summary>
            Transforms columns
            </summary>
        </member>
        <member name="M:BrightTable.ITransformColumn.Finalise(BrightData.IMetaData)">
            <summary>
            Complete the transformation
            </summary>
            <param name="metaData">Meta data store to receive transformation information</param>
        </member>
        <member name="T:BrightTable.ITransformColumn`2">
            <summary>
            Typed column transformer
            </summary>
            <typeparam name="TF"></typeparam>
            <typeparam name="TT"></typeparam>
        </member>
        <member name="M:BrightTable.ITransformColumn`2.Convert(`0,BrightData.IHybridBuffer{`1})">
            <summary>
            Writes the converted input to the buffer
            </summary>
            <param name="input"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:BrightTable.ITransformationContext">
            <summary>
            Transforms a column
            </summary>
        </member>
        <member name="M:BrightTable.ITransformationContext.Transform">
            <summary>
            Performs the transformation
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrightTable.ITransformationContext.Buffer">
            <summary>
            Buffer that is written to
            </summary>
        </member>
        <member name="T:BrightTable.IColumnInfo">
            <summary>
            Table column information
            </summary>
        </member>
        <member name="P:BrightTable.IColumnInfo.Index">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:BrightTable.IColumnInfo.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="T:BrightTable.IColumnTransformationParam">
            <summary>
            Informtion about a column transformation
            </summary>
        </member>
        <member name="P:BrightTable.IColumnTransformationParam.ColumnIndex">
            <summary>
            Column index
            </summary>
        </member>
        <member name="M:BrightTable.IColumnTransformationParam.GetTransformer(BrightTable.ColumnType,BrightTable.ISingleTypeTableSegment,BrightData.IProvideTempStreams,System.UInt32)">
            <summary>
            Gets a column transformer
            </summary>
            <param name="fromType">Convert from column type</param>
            <param name="column">Column to convert</param>
            <param name="tempStreams">Temp stream provider</param>
            <param name="inMemoryRowCount">Number of rows to cache in memory</param>
            <returns></returns>
        </member>
        <member name="T:BrightTable.IConvertibleTable">
            <summary>
            A table that is easily convertible to other types
            </summary>
        </member>
        <member name="M:BrightTable.IConvertibleTable.Row(System.UInt32)">
            <summary>
            Returns a row that can be easily converted
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IConvertibleTable.Rows(System.UInt32[])">
            <summary>
            Returns rows that can be easily converted
            </summary>
            <param name="rowIndices">Row indices to return</param>
            <returns></returns>
        </member>
        <member name="P:BrightTable.IConvertibleTable.DataTable">
            <summary>
            The underlying data table
            </summary>
        </member>
        <member name="M:BrightTable.IConvertibleTable.Map``1(System.Func{BrightTable.IConvertibleRow,``0})">
            <summary>
            Maps each row
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper">Callback that will be invoked on each convertible row</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.IConvertibleTable.ForEachRow(System.Action{BrightTable.IConvertibleRow})">
            <summary>
            Invokes a callback on each convertible row
            </summary>
            <param name="action">Callback</param>
        </member>
        <member name="T:BrightTable.IHaveDataTable">
            <summary>
            Indicates that the type has a data table
            </summary>
        </member>
        <member name="P:BrightTable.IHaveDataTable.DataTable">
            <summary>
            Data table
            </summary>
        </member>
        <member name="T:BrightTable.IConvertibleRow">
            <summary>
            A row that whose elements can be converted to other types
            </summary>
        </member>
        <member name="M:BrightTable.IConvertibleRow.Get(System.UInt32)">
            <summary>
            Gets an element
            </summary>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="P:BrightTable.IConvertibleRow.Segment">
            <summary>
            Returns the row segment
            </summary>
        </member>
        <member name="M:BrightTable.IConvertibleRow.GetTyped``1(System.UInt32)">
            <summary>
            Returns a value (dynamic conversion to type T)
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="index">Column index</param>
            <returns></returns>
        </member>
        <member name="P:BrightTable.IConvertibleRow.RowIndex">
            <summary>
            Row index
            </summary>
        </member>
        <member name="T:BrightTable.IConsumeColumnData">
            <summary>
            Interface that 
            </summary>
        </member>
        <member name="P:BrightTable.IConsumeColumnData.ColumnIndex">
            <summary>
            Column index that will be consumed
            </summary>
        </member>
        <member name="P:BrightTable.IConsumeColumnData.ColumnType">
            <summary>
            Column type of incoming data
            </summary>
        </member>
        <member name="T:BrightTable.IConsumeColumnData`1">
            <summary>
            Typed column consumer that writes to a buffer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BrightTable.IDataTableVectoriser">
            <summary>
            Data table vectoriser
            </summary>
        </member>
        <member name="M:BrightTable.IDataTableVectoriser.Vectorise(System.Object[])">
            <summary>
            Vectorise a table row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:BrightTable.IDataTableVectoriser.OutputSize">
            <summary>
            Size of the output vectors
            </summary>
        </member>
        <member name="M:BrightTable.IDataTableVectoriser.Enumerate">
            <summary>
            Returns a sequence of vectorised table rows
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrightTable.IReinterpretColumnsParam">
            <summary>
            Reinterpret columns parameters
            </summary>
        </member>
        <member name="P:BrightTable.IReinterpretColumnsParam.ColumnIndices">
            <summary>
            Source column indices
            </summary>
        </member>
        <member name="M:BrightTable.IReinterpretColumnsParam.GetNewColumns(BrightData.IBrightDataContext,BrightData.IProvideTempStreams,System.UInt32,System.ValueTuple{BrightTable.IColumnInfo,BrightTable.ISingleTypeTableSegment}[])">
            <summary>
            Gets new columns
            </summary>
            <param name="context">Bright data context</param>
            <param name="tempStreams">Temp stream provider</param>
            <param name="initialColumnIndex">First column index in the sequence</param>
            <param name="columns">Source column data</param>
            <returns></returns>
        </member>
        <member name="M:BrightTable.Segments.GrowableSegment`1.Dispose">
            <inheritdoc />
        </member>
        <member name="P:BrightTable.Segments.GrowableSegment`1.MetaData">
            <inheritdoc />
        </member>
        <member name="P:BrightTable.Segments.GrowableSegment`1.SingleType">
            <inheritdoc />
        </member>
        <member name="M:BrightTable.Segments.GrowableSegment`1.WriteTo(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:BrightTable.Segments.GrowableSegment`1.CopyTo(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:BrightTable.Transformations.ColumnConversion">
            <summary>
            Parameters that define a column conversion from one type to another
            </summary>
        </member>
        <member name="P:BrightTable.Transformations.ColumnConversion.ColumnIndex">
            <inheritdoc />
        </member>
        <member name="M:BrightTable.Transformations.ColumnConversion.GetTransformer(BrightTable.ColumnType,BrightTable.ISingleTypeTableSegment,BrightData.IProvideTempStreams,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:BrightTable.Transformations.ColumnNormalization">
            <summary>
            Parameters that define how to normalize a column of a data table
            </summary>
        </member>
        <member name="T:BrightTable.Transformations.ReinterpretColumns">
            <summary>
            Parameters that define how to reinterpret the columns in a data table
            </summary>
        </member>
    </members>
</doc>
